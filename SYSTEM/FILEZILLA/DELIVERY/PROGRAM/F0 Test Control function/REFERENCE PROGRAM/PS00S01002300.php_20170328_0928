<?php
# ======================================================================================
# [DATE]  : 2017.03.14					[AUTHOR]  : MIS) WINSTON
# [SYS_ID]: GPRISM					[SYSTEM]  : GPRISM
# [SUB_ID]:						[SUBSYS]  : 
# [PRC_ID]:						[PROCESS] : 
# [PGM_ID]: PS00S01002300.php				[PROGRAM] : Track-In(CCD)
# [MDL_ID]:						[MODULE]  : 
# --------------------------------------------------------------------------------------
# [COMMENT]
#
# --------------------------------------------------------------------------------------
# [UPDATE_LOG]
# 
# [UPDATE_PERSON]		[UPDATE]			[COMMENT]
# ====================	==================	============================================
# --------------------------------------------------------------------------------------
#******************************************************************

#******************************************************************
$g_Version = "2.0";
$g_PrgCD = "PS00S01002300";
#******************************************************************
#
#
#******************************************************************
if ($REQUEST_METHOD == "GET") {
	$gw_scr = cnv_formstr($_GET);
} else {
	$gw_scr = cnv_formstr($_POST);
}
#******************************************************************
#
#
#******************************************************************
$g_lang_path = $gw_scr['g_lang_path'];
$g_CharSet   = $gw_scr['g_CharSet'];
$g_usrId     = $gw_scr['usrId'];
$g_menuNo1   = $gw_scr['menuNo1'];
$g_menuNo2   = $gw_scr['menuNo2'];
$g_menuNo3   = $gw_scr['menuNo3'];
$g_menuNo4   = $gw_scr['menuNo4'];
#******************************************************************
#
#
#******************************************************************
require_once (getenv("GPRISM_HOME") . "/DirList_pf.php");		#
require_once (getenv("GPRISM_HOME") . "/Func/Check.php");		#
require_once ($g_func_dir . "/global.php");				#
require_once ($g_func_dir . "/db_op.php");				# 
require_once ($g_func_dir . "/xdb_op.php");				#
require_once ($g_func_dir . "/xpt_err_msg.php");			# 
#------------------------------------------------------------------
# Func dir
#------------------------------------------------------------------
require_once ($g_func_dir . "/xgn_man.php");				# 
require_once ($g_func_dir . "/xgn_cd.php");				#
require_once ($g_func_dir . "/xgn_prd.php");				#
require_once ($g_func_dir . "/xgc_prd.php");				#
require_once ($g_func_dir . "/xgn_pkg.php");				#
require_once ($g_func_dir . "/xgt_stp_cls.php");			#
require_once ($g_func_dir . "/xgt_lot.php");				#
require_once ($g_func_dir . "/xgt_nio.php");				#
require_once ($g_func_dir . "/xgt_npr.php");				#
require_once ($g_func_dir . "/xgt_stp.php");				#
require_once ($g_func_dir . "/xck_upd.php");				# 
require_once ($g_func_dir . "/xck_lio.php");				#
require_once ($g_func_dir . "/xck_rnk.php");				#
require_once ($g_func_dir . "/xpt_lot.php");				#
require_once ($g_func_dir . "/xgt_lp2.php");				#
require_once ($g_func_dir . "/xgt_lp2_cd.php");				#
require_once ($g_func_dir . "/xgt_use_equ.php");			#
require_once ($g_func_dir . "/xgt_prt_wip.php");			# 
require_once ($g_func_dir . "/xgc_prc_flw.php");
require_once ($g_func_dir . "/cs_xexc_iomg.php");			# IOMG Helper
#------------------------------------------------------------------
# VERB
#------------------------------------------------------------------
require_once ($g_func_dir . "/ioin.php");					
require_once ($g_func_dir . "/ioot.php");					
require_once ($g_func_dir . "/iomv.php");					
require_once ($g_func_dir . "/prpt.php");					 
require_once ($g_func_dir . "/prpc.php");					
require_once ($g_func_dir . "/prgt.php");					
require_once ($g_func_dir . "/iohd.php");					
require_once ($g_func_dir . "/mthd.php");					 
require_once ($g_func_dir . "/mtot.php");

#------------------------------------------------------------------
#
#------------------------------------------------------------------
require_once ($g_func_dir . "/cs_xgn_man.php");				# 
require_once ($g_func_dir . "/cs_xexc_hold_rsv.php");			#
require_once ($g_func_dir . "/cs_xck_fifo_lot.php");			#
require_once ($g_func_dir . "/cs_xck_jig.php");				#
require_once ($g_func_dir . "/cs_xck_trk_snd_lot.php");			#
require_once ($g_func_dir . "/cs_xck_prt_ctrl.php");			#
require_once ($g_func_dir . "/cs_xck_staff_ctrl.php");			# For Staff Process control
require_once ($g_func_dir . "/cs_xck_train_validate.php");      	# For Training Validation
require_once ($g_func_dir . "/cs_xck_equ_prt.php");			# 
require_once ($g_func_dir . "/cs_xck_trc_time.php");			# 
require_once ($g_func_dir . "/cs_xck_prt_time.php");			# 
require_once ($g_func_dir . "/cs_xck_exst_child.php");			# 
require_once ($g_func_dir . "/cs_xck_baking.php");			# 
require_once ($g_func_dir . "/cs_xck_backfill_trk_snd_lot.php");
require_once ($g_func_dir . "/cs_xck_backfill_web_service.php");
require_once ($g_func_dir . "/xpt_ctg_thd.php"); 
require_once ($g_func_dir . "/pdcr.php");
require_once ($g_func_dir . "/iorv.php");
require_once ($g_func_dir . "/cs_xgt_inhrt_po_data.php"); 
require_once ($g_func_dir . "/xgt_cd_cnt.php");
#------------------------------------------------------------------
# SCREEN
#------------------------------------------------------------------
require_once ($g_lang_dir . "/buttonM.php");				#
require_once ($g_lang_dir . "/PS00S01002300M.php");			#
require_once ($g_Gfunc_dir . "/xpt_screen.php");			#
require_once ($g_func_dir . "/cs_xpt_ccd_f0_test.php");
require_once ($g_func_dir . "/cs_xpt_scve.php");
#******************************************************************
#
# DEFINE
#
#******************************************************************
#------------------------------------------------------------------
# Diffusion Magazine Row
#------------------------------------------------------------------
define("DEF_MGZN_ROW",				4);
#------------------------------------------------------------------
# CE Codes
#------------------------------------------------------------------
define("CE_LTINF",					"CE00S02");				# Lot Information
define("CE_MAPINF",					"CE00S10");				# MAP Information
#------------------------------------------------------------------
# CT Codes
#------------------------------------------------------------------
define("CT_F0_TEST_TRACKOUT", 				"CT2100000001");
define("CT_BAKING_TIME_1",				"CT00S0000143");
define("CT_BAKING_TIME_2",				"CT00S0000144"); 
define('CT_CHIP_QTY',					'CT00S0000107');
define('CT_SUBSTRATE_QTY',				'CT00S0000152');
define('CT_METAL_WEIGHT',				'CT00S0000146');
define("CT_BAKING_TIME_BAKING",				"CT00S0000148");
define("CT_TEST_PGM",					"CT00S0000254");
define("CT_TEST_FIXTURE",				"CT00S0000255");
define("CT_TEST_TESTER",				"CT00S0000256");
define("CT_TEST_BOARD_PIN",				"CT00S0000396");
define("CT_TEST_LEN_PIN",				"CT00S0000397");
define("CT_PP_INPUT",					"CT21S0000003"); 		# Picture Perusal Input
define("CT_PP_FAIL",                    		"CT21S0000004");                # Picture Perusal Fail
define("CT_PP_YIELD",                   		"CT21S0000005");                # Picture Perusal Yield
define("CT_POWER_EYE_INPUT",				"CT21S0000006");
define("CT_POWER_EYE_OUTPUT",				"CT21S0000007");
define("CT_POWER_EYE_USER_ID",				"CT21S0000008");
define("CT_POWER_EYE_YIELD",				"CT21S0000009");
define("CT_POWER_EYE_FAIL",				"CT21S0000010");

#------------------------------------------------------------------
# TG Codes
#------------------------------------------------------------------
define("TG_MA",						"MA");						# ユーザＩＤ
define("TG_LT",						"LT");						# ロットＩＤ
define("TG_EQ",						"EQ");						# 装置コード
#------------------------------------------------------------------
# MAG and JIG
#------------------------------------------------------------------
define("CE_MAG",                                "CE00S04");
define("CT_MAG",                                "CT00S0000024");
define("JI_JIG",				"JI00S001");
define("SH_JIG",				"SH00S998");
#------------------------------------------------------------------
# 
#------------------------------------------------------------------
define("B7_CHIPMNG",				"B7SEM003");
define("B7_SUBSTRATEMNG",			"B7SEM004");
define("B7_SLICEMNG",				"B7SEM005");
define("D6_INSPECTION",				"D6SEM005");
define("PM_TESTER",				"PM00S0000001");
define("PM_FIXTURE",				"PM00S0000002");
define("MIN_MGZN_ROW",				"1");
define("MAX_MGZN_ROW",				"10");
define("LSI_DVSN",                              "ABSEM31"); # LSI
define("TR_DVSN",                               "ABSEM41"); # TR
define("BGA_DVSN",                              "ABSEM11"); # BGA
define("LD_DVSN",                               "ABSEM49"); # LD
define("CCD_DVSN",                               "ABSEM21"); # LD
define("D6_PART",                       	"D6SEM003");
define("LOT_DIV_CD",                    	"CCSEM01");
define("LOT_ID_CD",                     	"CDSEM01");
define("PARTNER_CD",                    	"AM00S001");
define("B7_RINGID",                     	"JI00S001");
define("CC_RTRN",                       	"CCSEM10");
define("BIND_CNT_DVS",  			"WIP_TN");
define("BIND_PRFX",             		"WIP");
define("WIPNOTE_HINA_RCV",              	"PS00S03000070");	
#------------------------------------------------------------------
# E9
#------------------------------------------------------------------
define("E9_NG",			serialize(array(
	"E911S020",
	"E911S030",
	"E911S130",
	"E911S090",
	"E911S120",
	"E911S130",
	"E911S140",
	"E911S150",
	"E911S670",
	"E911S680",
	"E911S470",
	"E911S480",
	"E911S490",
	"E911S500",
	"E911S540",
	"E911S550",
	"E911S610",
	"E911S620",
	"E911S160",
)));

define("E9_TIME",			serialize(array(
	"E911S060",			# UV irradiation
)));

define("E9_BAKE",			serialize(array(
	#"E911S250",			# Ball mount
	#"E911S650",			# Auto VI2
)));

define("E9_TEST",			serialize(array(
	"E911S310",			# F0 TEST
	"E911S320",			# F0 TEST (R)
	"E911S330",			# F-TEST
	"E911S340",			# F-TEST (R)
	"E911S350",			# F-TEST 52A
	"E911S360",			# F-TEST (RANK)
	"E911S370",			# F2-TEST
	"E911S380",			# F3-TEST
	"E911S390",			# OS TESTING
	"E911S400",			# RANK TEST
	"E911S410",			# APPLICATION TEST
	"E911S420",			# APPLICATION TEST 2
	"E911S430",			# LOW TEMP TEST
	"E911S440",			# LOW TEMP APPLICATION TEST
	"E911S450",			# BURN-IN (IN-HOUSE)
	"E911S460",			# BURN-IN 2 (IN-HOUSE)
        "E911S730",                     # APPLICATION FUNCTION TEST
        "E911S740",                     # F1 ROOM TEST
	"E911S861",			# F1-TEST (HV1)
	"E911S862",			# F1-TEST (HV2)
	"E911S863"			# F1-TEST (RETEST2)
)));

define("E9_PIC_PRSL_TEST",	serialize(array(
	"E921S018"			# PICTURE PERUSAL STEP

	))
	);

define("E9_BAKING",			"E911S630");				# Baking

define("E9_WIPE_N_PROTECT_SEAL",			"E911S630");				# WIPE AND PROTECT SEAL

#------------------------------------------------------------------
#
#------------------------------------------------------------------
define("CE_USEMAT",				"CESEM15");
define("PGM_MTMNG",				"PS00S04000120");
define("RMN_H_LIFE",				3);
define("RMN_H_EXP",				3);
define("CMT_LIFE",				"MATERIAL LIFE TIME NG");
define("CMT_EXP",				"MATERIAL EXPIRED TIME NG");
define("CMT_THAW",				"MATERIAL THAWING TIME NG");
define("NORMAL_BAKE_LIMIT",			"2");				# Normal lot baking limit

#******************************************************************
#
# 
#
#******************************************************************
#==================================================================
#
#==================================================================
function cnv_formstr($w_req)
{
	reset($w_req);
	while(list($key, $val) = each($w_req)){
		if(is_array($val)){
			$w_arr = cnv_formstr($val);
			$w_scr[$key] = $w_arr;
		} else {
			if(get_magic_quotes_gpc()){
				$val = stripslashes($val);
			}
			$w_scr[$key] = $val;
		}
	}

	return $w_scr;
}
###################################################################
#####                                                         #####
#####                                                         #####
###################################################################
#==================================================================
# INIT
#==================================================================
function main_init()
{
	global $gw_scr;
	global $g_msg;
	global $g_err_lv;

	set_init(1);

	scr_mode_chg(1);

	return 0;
}

###################################################################
#####                                                         #####
#####                                                         #####
###################################################################
#==================================================================
# 
#==================================================================
function main_md1()
{
	global $gw_scr;
	global $g_msg;
	global $g_err_lv;

	switch($gw_scr['s_act']){
	case "CHECK":
		main_md1_chk();
		break;
	case "ERASE":
		main_init();
		break;
	}

	return 0;
}
#==================================================================
#
#==================================================================
function main_md1_chk()
{
	global $gw_scr;
	global $g_msg;
	global $g_err_lv;
	global $g_cpu_dts;
	
	# for warning message
	$w_warn = array();
	
	#------------------------------------------------------------------
	# Check Input
	#------------------------------------------------------------------
	$w_rtn = check_input(1);
	if($w_rtn != 0){
		return 4000;
	}

	#------------------------------------------------------------------
	# 
	#------------------------------------------------------------------
	$w_rtn = cs_xgn_man($gw_scr['s_usr_id'], $w_usr_nm);
	if($w_rtn != 0){
		$g_err_lv = 0;
		$g_msg = xpt_err_msg($g_msg, $gw_scr['s_usr_id'], __LINE__);
		return 4000;
	}

	#------------------------------------------------------------------
	#
	#------------------------------------------------------------------
	$w_rtn = xgn_cd($gw_scr['s_equ_cd'], 1, $w_equ_nm);
	if($w_rtn != 0){
		$g_err_lv = 0;
		$g_msg = xpt_err_msg($g_msg, $gw_scr['s_equ_cd'], __LINE__);
		return 4000;
	}

	#------------------------------------------------------------------
	# 
	#------------------------------------------------------------------
	$w_rtn = xgt_lot($gw_scr['s_lot_id'], $w_lot_bas);
	if($w_rtn != 0){
		$g_err_lv = 0;
		$g_msg = xpt_err_msg($g_msg, $gw_scr['s_lot_id'], __LINE__);
		return 4000;
	}

	#------------------------------------------------------------------
	# 	
	#------------------------------------------------------------------
	$w_rtn = ioin_st_check($w_lot_bas);
	if($w_rtn != 0){
		$g_err_lv = 0;
		$g_msg = xpt_err_msg($g_msg, $gw_scr['s_lot_id'], __LINE__);
		return 4000;
	}

	#------------------------------------------------------------------
        # Check Lot is Valid Division or not
        #------------------------------------------------------------------
        if($w_lot_bas['DVSN_CD_PRC'] != constant('CCD_DVSN')) {

                if($w_lot_bas['DVSN_CD_PRC'] == constant('LSI_DVSN') || 
                  $w_lot_bas['DVSN_CD_PRC'] == constant('TR_DVSN')){          	# If LSI AND TR
                        list($g_msg, $g_err_lv) = msg("err_dvsn_lsi");
                }else if($w_lot_bas['DVSN_CD_PRC'] == constant('LD_DVSN')){     # If LD
                        list($g_msg, $g_err_lv) = msg("err_dvsn_ld");
                }else{                                                          # If invalid
                        list($g_msg, $g_err_lv) = msg("err_dvsn_not_valid");
                }
                $g_msg = xpt_err_msg($g_msg, trim($w_stpcls2), __LINE__);
                return 4000;
        }


        #-------------------------------------------------------------
        # SCVE Control
        #--------------------------------------------------------------
        $w_rtn = cs_xpt_scve__get_scve_lot($w_lot_bas['LOT_ID'], $w_scve_lot_id);
	if($w_rtn != 0) {        
                $g_err_lv = 0;
                $g_msg = xpt_err_msg($g_msg, $w_lot_bas['LOT_ID'], __LINE__);
                return 4000;
        }		

        if($w_lot_bas['LOT_ID'] != $w_scve_lot_id){ # Not SCVE Lot
		$w_rtn = cs_xpt_scve__is_scve($w_lot_bas['PRD_CD'], $w_is_scve_prd);

		if($w_rtn != 0) {   
			$g_err_lv = 0;
			$g_msg = xpt_err_msg($g_msg, $w_lot_bas['LOT_ID'], __LINE__);
	                return 4000;
		}

		if($w_is_scve_prd) {
			$w_rtn = cs_xpt_scve__is_finish_scve_step($w_scve_lot_id, $w_scve_data, $w_scve_status);

			if($w_rtn != 0) { 
				$g_err_lv = 0;
				$g_msg = xpt_err_msg($g_msg, $w_lot_bas['LOT_ID'], __LINE__);
				return 4000;
			}

			if(!$w_scve_status){
		            	list($g_msg, $g_err_lv) = msg("err_Wipe_stp_not_fin");
		                $g_msg = xpt_err_msg($g_msg, trim($w_stpcls2), __LINE__);
		                return 4000;
			}
		}
		    
	}
        #END SCVE

	#-------------------------------------------------------------
        # PICTURE PERUSAL - DATA LOADING
        #--------------------------------------------------------------

	#get existing qty
	$w_rtn = get_ctglog($w_lot_bas['LOT_ID'], constant("CE_LTINF"), constant("CT_PP_INPUT"), &$r_dat);

	if($w_rtn != 0) {
	    	$g_err_lv = 0;
        	$g_msg = xpt_err_msg($g_msg, $w_lot_bas['LOT_ID'], __LINE__);
            	return 4000;
        }

        $w_pct_prsal_input = trim($r_dat['CTG_DAT_TXT']);

        $w_rtn = get_ctglog($w_lot_bas['LOT_ID'], constant("CE_LTINF"), constant("CT_PP_FAIL"), &$r_dat);

	if($w_rtn != 0) {
	    	$g_err_lv = 0;
		$g_msg = xpt_err_msg($g_msg, $w_lot_bas['LOT_ID'], __LINE__);
		return 4000;
        }

        $w_pct_prsal_fail = trim($r_dat['CTG_DAT_TXT']);

        $w_rtn = get_ctglog($w_lot_bas['LOT_ID'], constant("CE_LTINF"), constant("CT_PP_YIELD"), &$r_dat);

	if($w_rtn != 0) {
	    	$g_err_lv = 0;
		$g_msg = xpt_err_msg($g_msg, $w_lot_bas['LOT_ID'], __LINE__);
		return 4000;
        }

        $w_pct_prsal_yield = trim($r_dat['CTG_DAT_TXT']);



		$w_powerEye_yield = 0;

		$w_rtn = getBUYield($w_lot_bas["PRD_CD"],$w_lot_bas["STP_CD"],$yld_buff);
		if($w_rtn == 0){
			$w_powerEye_yield = round($yld_buff / 100,4);
			
		}

	#-----------------------------------------------------------------
	# END PICTURE PERUSAL
	#-----------------------------------------------------------------

	#----------------------------------------
	# F0-TEST Expiry Checking
	#-------------------------------

	#Get f0-test Track In Date
	$w_rtn = get_lotinf($w_lot_bas['LOT_ID'],  constant("CE_LTINF"), constant("CT_F0_TEST_TRACKOUT"), $w_lot_f0_trkin_inf);
	if($w_rtn != 0){
		$g_err_lv = 0;
		$g_msg = xpt_err_msg($g_msg, "", __LINE__);
		return 4000;
	}
	if(count($w_lot_f0_trkin_inf)>0){
		$w_rtn = cs_xpt_ccd_f0_test__is_expire($w_lot_bas['LOT_ID'], constant("CT_F0_TEST_TRACKOUT"), $w_expiry_status);
		if($w_rtn != 0){
			$g_err_lv = 0;
			$g_msg = xpt_err_msg($g_msg, "", __LINE__);
			return 4000;
		}

		if(!$w_expiry_status){
			list($g_msg, $g_err_lv) = msg("err_F0_test_expired");
            $g_msg = xpt_err_msg($g_msg, trim($w_stpcls2), __LINE__);
            return 4000;
		}
	}

	# F0-TEST Expiry Checking END





	#------------------------------------------------------------------
        # Checking Backfill
        #------------------------------------------------------------------
        $w_web_err_cd = "";
        $w_web_err_nm = "";
        $w_web_err_msg = "";
        $w_rtn = chk_backfill($gw_scr['s_usr_id'],
                                                $w_lot_bas['LOT_ID'],
                                                "Y",
                                                $gw_scr['s_equ_cd'],
                                                $w_lot_bas['CHP_QTY'],
                                                "",
                                                $gw_scr['s_prg_id'],
                                                $w_web_err_cd,
                                                $w_web_err_nm,
                                                $w_web_err_msg);
        if($w_rtn != 0) return 4000;
        ###
        if($w_web_err_cd == "0"){
                list($g_msg, $g_err_lv) = msg("err_Err_backfill");
                $g_msg = xpt_err_msg($g_msg, $w_web_err_nm, __LINE__);
                return 4000;
        }

        if($w_web_err_cd == "2"){
                list($g_msg, $g_err_lv) = msg("err_Warn_backfill");
                $g_msg = xpt_err_msg($g_msg, $w_web_err_nm, __LINE__);
                $w_warn[] = $g_msg;
        }

	#Training Validation Checking
        $w_rtn = cs_xck_train_validate($gw_scr['s_usr_id'], $w_lot_bas['LOT_ID'], $gw_scr['s_equ_cd'], $w_lot_bas['STP_CD'], $w_allow);
        if ($w_rtn != 0) {
                $g_err_lv = 0;
                $g_msg = xpt_err_msg($g_msg, $gw_scr['s_usr_id'], __LINE__);
                return 4000;
        }else {
                if(!$w_allow){
                        $g_err_lv = 0;
                        $g_msg = xpt_err_msg($g_msg, $gw_scr['s_urs_id'], __LINE__);
                        return 4000;
                }
        }
	
	#------------------------------------------------------------------
	# 
	#------------------------------------------------------------------
	$w_rtn = xgt_stp_cls($w_lot_bas['STP_CD'], $w_stpcls2, $dmy);
	if($w_rtn != 0){
		$g_err_lv = 0;
		$g_msg = xpt_err_msg($g_msg, trim($w_lot_bas['STP_CD']), __LINE__);
		return 4000;
	}
	if(in_array(trim($w_stpcls2), unserialize(constant('E9_NG')))){
		list($g_msg, $g_err_lv) = msg("err_Disabled");
		$g_msg = xpt_err_msg($g_msg, trim($w_stpcls2), __LINE__);
		return 4000;
	}

	#------------------------------------------------------------------
	# EQU Relation Master
	#------------------------------------------------------------------
	$w_rtn = cs_xck_equ_prt($gw_scr['s_equ_cd'], $w_lot_bas['STP_CD'], $w_lot_bas['PRD_CD']);
	if($w_rtn != 0){
		$g_err_lv = 0;
		$g_msg = xpt_err_msg($g_msg, "", __LINE__);
		return 4000;
	}
	
	#------------------------------------------------------------------
	#
	#------------------------------------------------------------------
	$w_rtn = get_prcflwinf($w_lot_bas['PRC_CD'], $w_lot_bas['STP_NO'], $w_prcflw);
	if($w_rtn != 0){
		return 4000;
	}

	if(count($w_prcflw) == 0){
		list($g_msg, $g_err_lv) = msg("err_PrcFlw");
		$g_msg = xpt_err_msg($g_msg, trim($w_lot_bas['PRC_CD']), __LINE__);
		return 4000;
	}

	$w_chp_flg = 0;		#Chip
	$w_sub_flg = 0;		#Substrate
	$w_sl_flg = 0;		#Slice
	if($w_prcflw['BLC_CLS_3'] == constant("B7_CHIPMNG")){
		$w_chp_flg = 1;	
	}

	if($w_prcflw['BLC_CLS_3'] == constant("B7_SUBSTRATEMNG")){
		$w_sub_flg = 1;	
	}
	
	if($w_prcflw['BLC_CLS_3'] == constant("B7_SLICEMNG")){
		$w_sl_flg = 1;	
	}
	
	#------------------------------------------------------------------
	# IOIN EQU
	#------------------------------------------------------------------
	$w_rtn = ioin_equ_check($gw_scr['s_equ_cd'], $w_lot_bas);
	if($w_rtn){
		$g_err_lv = 0;
		$g_msg = xpt_err_msg($g_msg, $gw_scr['s_equ_cd'], __LINE__);
		return 4000;
	}

	#------------------------------------------------------------------
	#
	#------------------------------------------------------------------
	if(in_array(trim($w_stpcls2), unserialize(constant('E9_TIME')))){
		$w_rtn = cs_xck_trc_time("IOIN", $w_lot_bas, $w_trc_chk,$w_trc_inf);
		if($w_rtn != 0){
			$g_err_lv = 0;
			$g_msg = xpt_err_msg($g_msg, "", __LINE__);
			return 4000;
		}
        	if($w_trc_chk > 0) {
                	for($i=0; $i<$w_trc_chk;$i++){
                        	if($w_trc_inf[$i][3] == 4){
                        		list($g_msg, $g_err_lv) = msg("err_TrcTime");
                        		$g_msg = xpt_err_msg($g_msg, "", __LINE__);
                        		return 4000;	
                       		}
                	}
        	}
	}
	#------------------------------------------------------------------
	#
	#------------------------------------------------------------------
	if(in_array(trim($w_stpcls2), unserialize(constant('E9_BAKE')))){
		$w_rtn = chk_time_for_baking($w_lot_bas, $w_stpcls2);
		if($w_rtn != 0){
			return 4000;
		}
	}
	#------------------------------------------------------------------
	# 
	#------------------------------------------------------------------
	$w_testing_flg = 0;
	if(in_array(trim($w_stpcls2), unserialize(constant('E9_TEST')))){
		$w_testing_flg = 1;
	}


	$w_pic_prsl_testing_flg = 0;
	#echo "STP ".$w_stpcls2;
	if(in_array(trim($w_stpcls2), unserialize(constant('E9_PIC_PRSL_TEST')))){
		$w_pic_prsl_testing_flg = 1;
	}	
	
	#------------------------------------------------------------------
	#
	#------------------------------------------------------------------
	$w_rtn = cs_xck_jig_srch(trim($w_lot_bas['PRC_CD']),
							 trim($w_lot_bas['STP_CD']),
							 trim($w_lot_bas['PRD_CD']),
							 constant("JI_JIG"),
							 $w_prt_grp_b, $w_prt_grp_a, $w_jig_chg_id);
	if($w_rtn != 0){
		$g_err_lv = 0;
		$g_msg = xpt_err_msg($g_msg, "", __LINE__);
		return 4000;
	}

	$w_mgzn_flg = 0;
	if($w_prt_grp_b != ""){
		#------------------------------------------------------------------
		#
		#------------------------------------------------------------------
		$w_rtn = cs_xck_jig_get_lot(trim($gw_scr['s_lot_id']), constant("JI_JIG"), "1", $w_prt_grp_b,
                                    $w_prt_grp_a, $w_jig_chg_id, $w_mag_id_b);
        	if($w_rtn != 0){
            		$g_err_lv = 3;
            		$g_msg = xpt_err_msg($g_msg, "", __LINE__);
#            		return 4000;
			$w_mgzn_flg = 0;
        	} else {
			$w_mgzn_flg = 1;
		}
	}

	#------------------------------------------------------------------
	# 
	#------------------------------------------------------------------
	$w_rtn = xgn_cd($w_lot_bas['IO_BLC_CD'], 1, $w_io_blc_nm);
	if($w_rtn != 0){
		$g_err_lv = 0;
		$g_msg = xpt_err_msg($g_msg, $w_lot_bas['IO_BLC_CD'], __LINE__);
		return 4000;
	}

	$w_rtn = xgn_prd($w_lot_bas['PRD_CD'], $w_prd_nm, $dmy);
	if($w_rtn){
		$g_err_lv = 0;
		$g_msg = xpt_err_msg($g_msg, $w_lot_bas['PRD_CD'], __LINE__);
		return 4000;
	}

	$w_rtn = xgn_pkg($w_lot_bas['PRD_CD'], 1, $w_pkg_cd, $w_pkg_nm);
	if($w_rtn != 0){
		$g_err_lv = 0;
		$g_msg = xpt_err_msg($g_msg, $w_lot_bas['PRD_CD'], __LINE__);
		return 4000;
	}

	#------------------------------------------------------------------
	# FIFO
	#------------------------------------------------------------------
	global $g_low_dts;
	$w_last_dts = "";
	if($w_lot_bas['OUT_DTS_B'] != $g_low_dts){
		$w_last_dts = $w_lot_bas['OUT_DTS_B'];
	}elseif($w_lot_bas['UPD_DTS'] != $g_low_dts){
		$w_last_dts = $w_lot_bas['UPD_DTS'];
	}else{
		$w_last_dts = $w_lot_bas['CRT_DTS'];
	}
	
	$w_rtn = cs_xck_fifo_lot($w_fifo_lot,
							 $w_lot_bas['PRD_CD'],
							 $w_lot_bas['PRC_CD'],
							 $w_lot_bas['IO_BLC_CD'],
							 $w_last_dts);
	if($w_rtn != 0){
		if(count($w_fifo_lot) > 0){
			$g_err_lv = 3;
			$w_warn[] = xpt_err_msg($g_msg, implode("/", $w_fifo_lot), "");
		} else {
			$g_err_lv = 0;
			$g_msg = xpt_err_msg($g_msg, "", __LINE__);
			return 4000;
		}
	}

	#------------------------------------------------------------------
	#
	#------------------------------------------------------------------
	$w_rtn = cs_xck_prt_ctrl($w_lot_bas['PRD_CD'], $w_lot_bas['STP_CD'], $w_prt_ctrl,
					$dmy, $dmy, $dmy, $dmy, $dmy, $dmy, $dmy);
	if($w_rtn != 0){
		$g_err_lv = 0;
		$g_msg = xpt_err_msg($g_msg, "", __LINE__);
		return 4000;
	}

	
	#------------------------------------------------------------------
	# Baking max check - for RMO's and etc
	#------------------------------------------------------------------
	#Get max baking count and baking count from lot_inf_tbl
	if(trim($w_stpcls2) == constant("E9_BAKING")){
		$w_rtn = get_lotinf($gw_scr['s_lot_id'],  constant("CE_LTINF"), constant("CT_BAKING_TIME_BAKING"), $w_lot_bkin_inf);
		if($w_rtn != 0){
			$g_err_lv = 0;
			$g_msg = xpt_err_msg($g_msg, "", __LINE__);
			return 4000;
		}
	
		$gw_scr['s_max_bake_cnt'] = $w_lot_bkin_inf['CTG_DAT_VAL'];
		if($gw_scr['s_max_bake_cnt'] == ''){
			$gw_scr['s_max_bake_cnt'] = 0;
		}
		if($gw_scr['s_max_bake_cnt'] >= constant('NORMAL_BAKE_LIMIT')){
			list($g_msg, $g_err_lv) = msg("err_MaxBake");
			$g_msg = xpt_err_msg($g_msg, "", __LINE__);
			return 4000;
		}
	}

	#------------------------------------------------------------------
        # Check MBN hold or not
        #------------------------------------------------------------------
        $w_rtn = get_MBN_Lots($gw_scr['s_equ_cd'], $w_dat);

        if($w_rtn != 0){
                list($g_msg, $g_err_lv) = msg("err_Sel_MBN");
                $g_msg = xpt_err_msg($g_msg, "", __LINE__);
                return 4000;
        }

        if(count($w_dat) > 0){
                list($g_msg, $g_err_lv) = msg("err_MBN_Hold");
                $g_msg = xpt_err_msg($g_msg, implode(",", $w_dat), __LINE__);
                return 4000;
        }

	#------------------------------------------------------------------
	# Set data to Screen
	#------------------------------------------------------------------
	$gw_scr['s_usr_nm']      	= trim($w_usr_nm);
	$gw_scr['s_equ_nm']      	= trim($w_equ_nm);
	$gw_scr['s_upd_lev']     	= trim($w_lot_bas['UPD_LEV']);
	$gw_scr['s_chp_flg']     	= $w_chp_flg;
	$gw_scr['s_sub_flg']     	= $w_sub_flg;



	// $gw_scr['s_sl_flg']     	= $w_sl_flg;

	#PICTURE PERUSAL DATA LOADING
	$gw_scr['s_pct_prsal_input']     	= $w_pct_prsal_input;
	$gw_scr['s_pct_prsal_fail']     	= $w_pct_prsal_fail;
	$gw_scr['s_pct_prsal_yield']     	= $w_pct_prsal_yield;
	


	$gw_scr['s_testing_flg']   	= $w_testing_flg;
	$gw_scr['s_pic_prsl_testing_flg'] = $w_pic_prsl_testing_flg;

	$gw_scr['s_powerEye_yield'] = trim ($w_powerEye_yield);
	
	$gw_scr['s_powerEye_date']            = $g_cpu_dts;

	$gw_scr['s_mgzn_flg']    	= $w_mgzn_flg;
	$gw_scr['s_io_blc_nm']  	= trim($w_io_blc_nm);
	$gw_scr['s_prd_nm']     	= trim($w_prd_nm);
	$gw_scr['s_rnk_ptn']    	= trim($w_lot_bas['RNK_PTN']);
	$gw_scr['s_pkg_nm']     	= trim($w_pkg_nm);
	$gw_scr['s_lot_no_str'] 	= trim($w_lot_bas['LOT_NO']);
	$gw_scr['s_chp_qty'] 		= ($w_chp_flg == 0) ? $w_lot_bas['CHP_QTY'] : "";



	$gw_scr['s_prd_cd'] 		= trim($w_lot_bas['PRD_CD']);
	$gw_scr['s_stp_cd'] 		= trim($w_lot_bas['STP_CD']);
	$gw_scr['s_shp_cd'] 		= trim($w_lot_bas['SHP_CD']);
	$gw_scr['s_prt_ctrl'] 		= $w_prt_ctrl;
	$gw_scr['s_stp_cls_2'] 		= trim($w_stpcls2);
	
	if(count($w_warn) > 0){
		$g_err_lv = 3;
		$g_msg = implode("<br>", $w_warn);
	}
	
	scr_mode_chg(2);

	return 0;
}

#--------------------------------------------------------
# Get the process code with product
#--------------------------------------------------------
function get_process_info($w_prd_cd, &$r_prc_info)
{
        global $g_msg;
        global $g_err_lv;
                global $gw_prc_cds;

                $w_prc_cds = implode("','", $gw_prc_cds );
        #---------------
        # SQL
        #---------------
        $w_sql = "
                SELECT DISTINCT A.PRC_CD PRC_CD, B.PRC_NM_FLL PRC_NM_FLL FROM PRD_ORG_MST A, PRC_MST B
                WHERE A.PRC_CD = B.PRC_CD
                AND A.DEL_FLG = '0' AND B.DEL_FLG = '0'
                AND A.PRD_CD = '{$w_prd_cd}'
                AND A.PRC_CD IN ( '{$w_prc_cds}' )
                ORDER BY PRC_CD
                ";

        #---------------
        #
        #---------------
        $w_stmt = db_res_set($w_sql);

        #---------------
        #
        #---------------
        $w_rtn = db_do($w_stmt);
        if ($w_rtn != 0){
                list($g_msg, $g_err_lv) = msg("err_LotInfTbl");
                $g_msg = xpt_err_msg($g_msg, "", __LINE__);
                return $w_rtn;
        }

        #---------------
        #
        #---------------
        while ($w_row = db_fetch_row($w_stmt)) {
                $r_prc_info[] = $w_row;
        }

        #--------------------
        #
        #--------------------
        db_res_free($w_stmt);

        #---------------
        # return
        #---------------
        return 0;

}

#--------------------------------------------------------
# Get the Step IO Code
#--------------------------------------------------------
function get_step_io_info($w_prc_cd, &$r_stp_io_info)
{
        global $g_msg;
        global $g_err_lv;
        global $gw_stp_io_cds;

        $w_stp_io_cds  = implode("','", $gw_stp_io_cds );
        #---------------
        # SQL
        #---------------
        $w_sql = "
                 SELECT
         A.IO_BLC_CD
         FROM
         PRC_FLW_MST A, NM_MST B
         WHERE
                 A.IO_BLC_CD = B.CD AND B.TAG = 'IO'
                 AND A.IO_FLG = '1'
                 AND A.DEL_FLG = '0' AND B.DEL_FLG = '0'
                 AND A.PRC_CD = '{$w_prc_cd}'
                 AND A.STP_CD IN ( '{$w_stp_io_cds}' )
                ";
        #---------------
        #
        #---------------
        $w_stmt = db_res_set($w_sql);

        #---------------
        #
        #---------------
        $w_rtn = db_do($w_stmt);
        if ($w_rtn != 0){
                list($g_msg, $g_err_lv) = msg("err_LotInfTbl");
                $g_msg = xpt_err_msg($g_msg, "", __LINE__);
                return $w_rtn;
        }

        #---------------
        #
        #---------------
        while ($w_row = db_fetch_row($w_stmt)) {
                $r_stp_io_info[] = $w_row;
        }

        #--------------------
        #
        #--------------------
        db_res_free($w_stmt);

        #---------------
        # return
        #---------------
        return 0;

}

function ins_plate_no($w_lot_id, $w_plt_no, $w_chp_qty, $w_verb){
        global $gw_scr;
        global $g_err_lv;
        global $g_msg;
        global $g_cpu_dts;
        global $g_low_dts;
        $w_ins = array
                (
                        "DEL_FLG"               => "0",
                        "LOT_ID"                => $w_lot_id,
                        "CTG_DVS_CD"            => CE_LBL,
                        "CTG_CD"                => CT_PLTID,
                        "SL_ID"                 => "1",
                        "CTG_DAT_TXT"           => $w_plt_no,
                        "CTG_DAT_VAL"           => $w_chp_qty,
                        "CRT_VERB"              => $w_verb,
                        "CRT_DTS"               => $g_cpu_dts,
                        "USR_ID_CRT"            => $gw_scr['s_usr_id'],
                        "UPD_VERB"              => " ",
                        "UPD_DTS"               => $g_low_dts,
                        "USR_ID_UPD"            => " ",
                        "UPD_LEV"               => "1"
                );


        $w_rtn = db_insert("LOT_INF_TBL", $w_ins);
        if($w_rtn != 0){
                list($g_msg, $g_err_lv) = msg("err_Ins_LotInfTbl");
                $g_msg = xpt_err_msg($g_msg, "", __LINE__);
                return $w_rtn;
        }

        return 0;
}
#=========================================================================
# insert delivered lot
#=========================================================================
function ins_delivered_lot($w_lot_id, $w_delivered_lot,$w_verb){
        global $gw_scr;
        global $g_err_lv;
        global $g_msg;
        global $g_cpu_dts;
        global $g_low_dts;

        $w_ins = array
                (
                        "DEL_FLG"               => "0",
                        "LOT_ID"                => $w_lot_id,
                        "CTG_DVS_CD"            => CE_LBL,
                        "CTG_CD"                => CT_DELIVERED_LOT,
                        "SL_ID"                 => "1",
                        "CTG_DAT_TXT"           => $w_delivered_lot,
                        "CTG_DAT_VAL"           => "",
                        "CRT_VERB"              => $w_verb,
                        "CRT_DTS"               => $g_cpu_dts,
                        "USR_ID_CRT"            => $gw_scr['s_usr_id'],
                        "UPD_VERB"              => " ",
                        "UPD_DTS"               => $g_low_dts,
                        "USR_ID_UPD"            => " ",
                        "UPD_LEV"               => "1"
                );


        $w_rtn = db_insert("LOT_INF_TBL", $w_ins);
        if($w_rtn != 0){
                list($g_msg, $g_err_lv) = msg("err_Ins_LotInfTbl");
                $g_msg = xpt_err_msg($g_msg, "", __LINE__);
                return $w_rtn;
        }

        return 0;
}

function ins_substrate_no($w_lot_id, $w_plt_no, $w_chp_qty, $w_verb){
        global $gw_scr;
        global $g_err_lv;
        global $g_msg;
        global $g_cpu_dts;
        global $g_low_dts;

        $w_ins = array
                (
                        "DEL_FLG"               => "0",
                        "LOT_ID"                => $w_lot_id,
                        "CTG_DVS_CD"            => CE_LBL,
                        "CTG_CD"                => CT_SBQTY,
                        "SL_ID"                 => "1",
                        "CTG_DAT_TXT"           => " ",
                        "CTG_DAT_VAL"           => $w_plt_no,
                        "CRT_VERB"              => $w_verb,
                        "CRT_DTS"               => $g_cpu_dts,
                        "USR_ID_CRT"            => $gw_scr['s_usr_id'],
                        "UPD_VERB"              => " ",
                        "UPD_DTS"               => $g_low_dts,
                        "USR_ID_UPD"            => " ",
                        "UPD_LEV"               => "1"
                );


        $w_rtn = db_insert("LOT_INF_TBL", $w_ins);
        if($w_rtn != 0){
                list($g_msg, $g_err_lv) = msg("err_Ins_LotInfTbl");
                $g_msg = xpt_err_msg($g_msg, "", __LINE__);
                return $w_rtn;
        }

        return 0;
}

function ins_prnlot_id($w_lot_id, $w_prnlot_id, $w_verb){
        global $gw_scr;
        global $g_err_lv;
        global $g_msg;
        global $g_cpu_dts;
        global $g_low_dts;
        $w_ins = array
                (
                        "DEL_FLG"               => "0",
                        "LOT_ID"                => $w_lot_id,
                        "CTG_DVS_CD"            => CE_LBL,
                        "CTG_CD"                => constant('CT_PARENTLOT'),
                        "SL_ID"                 => " ",
                        "CTG_DAT_TXT"           => $w_lot_id,
                        "CTG_DAT_VAL"           => null,
                        "CRT_VERB"              => $w_verb,
                        "CRT_DTS"               => $g_cpu_dts,
                        "USR_ID_CRT"            => $gw_scr['s_usr_id'],
                        "UPD_VERB"              => " ",
                        "UPD_DTS"               => $g_low_dts,
                        "USR_ID_UPD"            => " ",
                        "UPD_LEV"               => "1"
                );


        $w_rtn = db_insert("LOT_INF_TBL", $w_ins);
        if($w_rtn != 0){
                list($g_msg, $g_err_lv) = msg("err_Ins_LotInfTbl");
                $g_msg = xpt_err_msg($g_msg, "", __LINE__);
                return $w_rtn;
        }

        return 0;
}

function ins_log_bind_inf($w_usr_id,
                                                $w_bind_id,
                                                $w_form_id,
                                                $w_verb)
{
        global $g_msg;
        global $g_err_lv;
        global $g_cpu_dts;
        global $g_low_dts;

        #------------------------------------------------------------------
	#
        #------------------------------------------------------------------
        $w_ins = array
        (
                'DEL_FLG'               => '0',
                'BIND_ID'               => $w_bind_id,
                'BIND_DVS'              => $w_verb,
                'BIND_TXT_1'    => ' ',
                'BIND_TXT_G_1'  => ' ',
                'BIND_TXT_2'    => ' ',
                'BIND_TXT_G_2'  => ' ',
                'BIND_TXT_3'    => ' ',
                'BIND_TXT_G_3'  => ' ',
                'FORM_ID'               => $w_form_id,
                'BIND_QTY_1'    => 0,
                'BIND_QTY_2'    => 0,
                'BIND_QTY_3'    => 0,
                'CRT_DTS'               => $g_cpu_dts,
                'USR_ID_CRT'    => $w_usr_id,
                'UPD_DTS'               => $g_low_dts,
                'USR_ID_UPD'    => ' ',
                'UPD_LEV'               => 1,
        );
        $w_rtn = db_insert("LOG_BIND_INF", $w_ins);
        if($w_rtn != 0){
                list($g_msg, $g_err_lv) = msg("err_Ins");
                $g_msg = xpt_err_msg($g_msg, "LOG_BIND_INF", __LINE__);
                $gw_scr['s_msg']    = $g_msg;
                $gw_scr['s_err_lv'] = $g_err_lv;
                return 4000;
        }

        return 0;
}

function ins_log_bind_tbl($w_usr_id,
                                                $w_bind_id,
                                                $w_line_no,
                                                $w_lot_id,
                                                $w_verb,
                                                $w_stp_cd)
{
        global $g_msg;
        global $g_err_lv;
        global $g_cpu_dts;
        global $g_low_dts;

        #------------------------------------------------------------------
        #
        #------------------------------------------------------------------
        $w_ins = array
        (
                'DEL_FLG'               => '0',
                'BIND_ID'               => $w_bind_id,
                'LINE_NO'               => $w_line_no,
                'LOT_ID'                => $w_lot_id,
                'VERB'                  => $w_verb,
                'STP_CD'                => $w_stp_cd,
                'LOG_CRT_DTS'   => $g_cpu_dts,
                'CRT_DTS'               => $g_cpu_dts,
                'USR_ID_CRT'    => $w_usr_id,
                'UPD_DTS'               => $g_low_dts,
                'USR_ID_UPD'    => ' ',
                'UPD_LEV'               => 1,
        );
        $w_rtn = db_insert("LOG_BIND_TBL", $w_ins);
        if($w_rtn != 0){
                list($g_msg, $g_err_lv) = msg("err_Ins");
                $g_msg = xpt_err_msg($g_msg, "LOG_BIND_TBL", __LINE__);
                return 4000;
        }

        return 0;
}


function receive_in_exe($w_lot, &$w_new_lot_id){
        global $gw_scr;
        global $g_msg;
        global $g_err_lv;
        global $g_low_dts;
        global $g_cpu_dts;

        $w_space = " ";                                 
        $w_bcrt_flg = 0;
        $w_rgbr_flg = 0;
        $w_prc_cls_4 = constant('D6_PART'); 

        // get process code
        #$w_rtn = get_process_info($gw_scr['s_prd_cd'],$w_process_info);
        $w_process_cd = $w_lot['PRC_CD']; #$w_process_info[0]['PRC_CD'];

        if($w_process_cd == ""){
                list($g_msg, $g_err_lv) = msg("err_Err_Process");
                return 4000;
        }

        // get step io code
        #$w_rtn = get_step_io_info($w_process_cd, $w_stp_io_info);
        $w_stp_io_cd = $w_lot['IO_BLC_CD']; #$w_stp_io_info[0]['IO_BLC_CD'];

        if($w_stp_io_cd == ""){
                list($g_msg, $g_err_lv) = msg("err_Err_Step");
                return 4000;
        }

        // date code
        $w_scret_no = "";

        // Magazine
        $w_magazine_id = " ";

        // slice
	if($gw_scr['s_sl_flg'] != "1"){
	        $gw_scr['s_ic_sl_qty'] = "dis_text";
        	$gw_scr['s_sl_qty'] = "0";
	}

        //
        $w_lot_cls_cd = constant('LOT_DIV_CD');
        $w_lot_dec_cd = constant('LOT_ID_CD');
        $w_partner_cd = constant('PARTNER_CD');
        $w_bln_flag = 0;
        $w_management_flag = 0;
        $w_aid_place_cd = " ";
        $w_plt_no = " ";
        $w_rtrn_lot_id = " ";
        $w_lf_qty = " ";
        $w_rg_qty = " ";
        $w_ret_rsn = " ";
        
        #------------------------------------------------------------------
        # LOT_NUM_TBL 
        #------------------------------------------------------------------
        $w_rtn = db_lock ("LOT_NUM_TBL");
        if ($w_rtn != 0) {
                db_rollback ();
                $g_err_lv = 0;
                $g_msg = xpt_err_msg ($g_msg, "", __LINE__);
                return $w_rtn;
        }

        #------------------------------------------------------------------
        # CD_USE_CNT_TBL 
        #------------------------------------------------------------------
        $w_rtn = db_lock ("CD_USE_CNT_TBL");
        if ($w_rtn != 0) {
                db_rollback ();
                $g_err_lv = 0;
                $g_msg = xpt_err_msg ($g_msg, "", __LINE__);
                return $w_rtn;
        }


        #------------------------------------------------------------------
        # D6SEM003 Diffusion
        #------------------------------------------------------------------
        if (rtrim($w_prc_cls_4) == D6_PART) {
                if (strlen(trim($w_lot['LOT_NO'])) > 0 ) {
                        $w_new_ass_lot_no = trim($w_lot['LOT_NO']);
                }
        }

        #------------------------------------------------------------------
        # D6SEM004
        #------------------------------------------------------------------
        if (strcmp($w_prc_cls_4, D6_ASS) >= 0) {
                #------------------------------------------------------------------
                # 
                #------------------------------------------------------------------
                $w_rtn = xgt_lot_no_id($gw_scr['s_usr_id'],
                                                                trim($w_lot['PRD_CD']),
                                                                $w_process_cd,
                                                                $w_new_ass_lot_no);

                if ($w_rtn != 0) {
                        db_rollback();
                        $g_err_lv = 0;
                        $g_msg = xpt_err_msg($g_msg, "", __LINE__);
                        return $w_rtn;
                }
        }
	##############################################################################################################


        #------------------------------------------------------------
        #  (xgc_prc_flw)
        #------------------------------------------------------------------
        $w_rtn = xgc_prc_flw($w_process_cd, $w_stp_io_cd,
                                                 $w_stp_cd, $w_stp_no);

        #------------------------------------------------------------------
        # B6SEM001 add 2006.05.08 add
        #------------------------------------------------------------------
        $w_sql = "";
        $w_sql .= "SELECT "
                        .       "BLC_CLS_2 ,"
                        .       "BLC_CLS_3 "
                        . "FROM "
                        .       "PRC_FLW_MST "
                        . "WHERE "
                        .       "PRC_CD = '" . $w_process_cd . "' "
                        .       "AND IO_BLC_CD = '" . $w_stp_io_cd . "' "
                        .       "AND DEL_FLG = '0' ";
        $w_stmt = db_res_set($w_sql);
        $w_rtn = db_do($w_stmt);
        if($w_rtn != 0){
                list($g_msg, $g_err_lv) = msg("err_Sel_PrcFlwMst");
                $g_msg = xpt_err_msg($g_msg, "", __LINE__);
                return $w_rtn;
        }

        $w_row = db_fetch_row($w_stmt);
        if(trim($w_row['BLC_CLS_2']) == B6_SEC){
                #------------------------------------------------------------------
                # B6SEM001
                #------------------------------------------------------------------
                if($w_scret_no == ""){
                        list($g_msg, $g_err_lv) = msg("inp_secret");
                        $g_msg = xpt_err_msg($g_msg, "", __LINE__);
                        return 4000;
                }
        } else {
                #------------------------------------------------------------------
                # B6SEM001
                #------------------------------------------------------------------
                if($w_scret_no != ""){
                        list($g_msg, $g_err_lv) = msg("no_inp_secret");
                        $g_msg = xpt_err_msg($g_msg, $w_scret_no, __LINE__);
                        return 4000;
                }
                $w_scret_no = " ";
        }
        db_res_free($w_stmt);

        $w_sql = "";
        $w_sql .= "SELECT "
                        .       "JIG_DVS_CD ,"
                        .       "PRT_GRP_CD_B "
                        . "FROM "
                        .       "JIG_FLW_MST "
                        . "WHERE "
                        .       "PRT_GRP_CD_B != ' ' AND "
                        .       "PRC_CD = '".$w_process_cd."' AND "
                        .       "STP_CD = '".$w_stp_cd."' AND "
                        .       "DEL_FLG = '0' ";
        $w_stmt = db_res_set($w_sql);
        $w_rtn = db_do($w_stmt);
        if($w_rtn != 0){
                list($g_msg, $g_err_lv) = msg("err_Sel_PrcFlwMst");
                $g_msg = xpt_err_msg($g_msg, "", __LINE__);
                return $w_rtn;
        }

        $w_row = db_fetch_row($w_stmt);
        #
        if(trim($w_row['JIG_DVS_CD']) == constant("B7_RINGID")) {
                #------------------------------------------------------------------
                # 
                #------------------------------------------------------------------
                if (strlen(trim($w_magazine_id)) == 0) {
                        list($g_msg, $g_err_lv) = msg("rngt");
                        $g_msg = xpt_err_msg($g_msg, $w_magazine_id, __LINE__);
                        return 4000;
                }
                $w_mgz_id = explode(",",$w_magazine_id);
                for($a = 0; $a < count($w_mgz_id); $a++) {

                        $w_sql = "";
                        $w_sql .= "SELECT "
                                .       "PRT_CD ,"
                                .       "PRT_ST_DVS "
                                . "FROM "
                                .       "PRT_WIP_TBL "
                                . "WHERE "
                                .       "PRT_CD = '".constant("PRT_MAG")."' AND "
                                .       "QTY != 0  AND "
                                .       "MT_LOT_ID = '".trim($w_mgz_id[$a])."' ";
                        $w_stmt = db_res_set($w_sql);
                        $w_rtn = db_do($w_stmt);
                        if($w_rtn != 0){
                                list($g_msg, $g_err_lv) = msg("err_Sel_PrcFlwMst");
                                $g_msg = xpt_err_msg($g_msg, "", __LINE__);
                                return $w_rtn;
                        }
                        $w_jig = db_fetch_row($w_stmt);
                        if(count($w_jig) > 0)
                        {
                                if($w_jig['PRT_ST_DVS'] == 'AC'){
                                        $g_err_lv = 0;
                                        $g_msg = xpt_err_msg("Magazine ID already used by other lot.", trim($w_mgz_id[$a]), __LINE__);
                                        return $w_rtn;
                                }
                        } else {
                                $g_err_lv = 0;
                                $g_msg = xpt_err_msg("Magazine ID invalid.", trim($w_mgz_id[$a]), __LINE__);
                                return $w_rtn;
                        }
                }
                $w_bcrt_flg = 1;
        }
		##############################################################################################################


        $w_bas['lot_id_rec']                    = $w_space;                                            
        $w_bas['lot_id_dif_str']                = $w_space;                                            
        if (strlen(trim($w_new_ass_lot_no)) > 0 ) {
                $w_bas['lot_no']                = $w_new_ass_lot_no;    
        } else {
                $w_bas['lot_no']                = $w_space;                                             
        }
        if (strlen(trim($w_lot['LOT_NO_STR'])) > 0 ) {
                $w_bas['lot_no_str']            = trim($w_lot['LOT_NO_STR']);     
        } else {
                $w_bas['lot_no_str']            = $w_space;                                            
        }
        $w_bas['lot_no']                        = $w_bas['lot_no_str'];
        $w_bas['lot_st_dvs']                    = "PD";                                                
        $w_bas['lot_st_dvs_b']                  = "WT";                                                
        $w_bas['lot_dvs_fin']                   = "00";                                                
        $w_bas['prd_cd']                        = trim($w_lot['PRD_CD']);                  
        $w_bas['rt_cd']                         = trim($w_lot['RT_CD']);                   
        $w_bas['prc_cd']                        = $w_process_cd;
        $w_bas['io_blc_cd']                     = $w_stp_io_cd;        
        $w_bas['pkt_cd']                        = $w_space;                                             
        if (strlen(trim($gw_scr['s_sl_qty'])) > 0 ) {
                $w_bas['sl_qty']                = $gw_scr['s_sl_qty'];                  
        } else {
                $w_bas['sl_qty']                = "0";                                                 
        }
        if (strlen(trim($gw_scr['s_db_rejects_qty'])) > 0 ) {
                $w_bas['chp_qty']               = $gw_scr['s_db_rejects_qty'];             
        } else {
                $w_bas['chp_qty']               = "0";                                                  
        }
        $w_bas['str_pln_dts']                   = $g_low_dts;                                   
        if (strlen(trim($w_scret_no)) > 0 ) {
                $w_bas['secret_no']             = $w_scret_no;
        } else {
                $w_bas['secret_no']             = $w_space;                                             
        }
        $w_bas['prio']                          = "9999";                                               
        $w_bas['lot_typ_cd']                    = $w_lot_cls_cd;                
        $w_bas['lot_dsc_cd']                    = $w_lot_dec_cd;                
        $w_bas['bln_flg']                       = $w_bln_flag;          
        $w_bas['plt_dvs_cd']                    = "CBSEM00";                                    
        $w_bas['mng_flg']                       = $w_management_flag;   
        if (strlen(trim($w_aid_place_cd)) > 0 ) {
                $w_bas['bu_cd_ast']             = $w_aid_place_cd;
        } else {
                $w_bas['bu_cd_ast']             = $w_space;                                             
        }
        $w_bas['bu_cd_cns']                     = $w_space;                                             
        $w_bas['lf_qty']                = "0";                                                  
        #UPD 040708 DOS)Fujita
        if (strlen(trim($gw_scr['s_rnk_ptn'])) > 0 ) {
                $w_bas['rnk_ptn']               = $gw_scr['s_rnk_ptn'];                 
        } else {
                $w_bas['rnk_ptn']               = $w_space;                                            
        }
        $w_bas['shp_fct_cd']            	= $w_space;                                             
        $w_bas['usr_id']                        = $gw_scr['s_usr_id'];                 
        $w_bas['cmt']                           = "Adjust physical Qty to include failures(type for SFG without OS)[".$gw_scr['s_lot_id']."]";                                               
        #------------------------------------------------------------------
        # xgt lot
        #------------------------------------------------------------------
        $w_rtn = xgt_lot($gw_scr['s_lot_id'], $w_lot_bas);
                if($w_rtn != 0){
                        $g_err_lv = 0;
                        $g_msg = xpt_err_msg($g_msg, $gw_scr['s_lot_id'], __LINE__);
                        return 4000;
                }

        $w_lot_bas_before_split = $w_lot_bas;
        $w_rtn = pdcr($w_bas, $w_lot_id, $w_lot_bas);

        if ($w_rtn != 0) {
                db_rollback();       
                $g_msg = xpt_err_msg($g_msg, "PDCR", __LINE__);
                $g_err_lv = 0;

                return $w_rtn;
        }
        # Ensure PO CTG_CD is inherited to child.
        $w_rtn = cs_xgt_inhrt_po_data( $gw_scr['s_usr_id'], $w_lot_bas_before_split,$w_lot_id);

        if ($w_rtn != 0) {
                db_rollback();
                $g_err_lv = 0;
                $g_msg  = xpt_err_msg($g_msg, $w_rtn, __LINE__);
                return;
        }

        $w_cmt          = $w_bas['cmt'];                                               

        #------------------------------------------------------------------
        # IROOV
        #------------------------------------------------------------------
        $w_rtn = iorv($w_lot_id, $w_bas['usr_id'],
                                  $w_lot_bas['UPD_LEV'], $w_partner_cd, $w_cmt, $w_lot_bas);
        if ($w_rtn != 0) {
                db_rollback();          
                $g_msg = xpt_err_msg($g_msg, "IORV", __LINE__);
                $g_err_lv = 0;

                return $w_rtn;
        }

        #------------------------------------------------------------------
        # 
        #------------------------------------------------------------------
        if($w_scret_no != "" && $w_scret_no != " "){
                $w_rtn = ins_secret_no($w_lot_id, $w_scret_no, $gw_scr['s_rej_chp_qty'], "IORV");
                if($w_rtn != 0){
                        db_rollback();
                        return $w_rtn;
                }
        }

        if($w_plt_no != "" && $w_plt_no != " "){
                $w_rtn = ins_plate_no($w_lot_id, $w_plt_no, $gw_scr['s_rej_chp_qty'], "IORV");
                if($w_rtn != 0){
                        db_rollback();
                        return $w_rtn;
                }
        }

        if($w_rtrn_lot_id != "" && $w_rtrn_lot_id != " "){
                $w_rtn = ins_delivered_lot($w_lot_id, $w_rtrn_lot_id, "IORV");
                if($w_rtn != 0){
                        db_rollback();
                        return $w_rtn;
                }

        }
        
        if($w_lf_qty != "" && $w_lf_qty != " "){
                $w_rtn = ins_substrate_no($w_lot_id, $w_lf_qty, $gw_scr['s_rej_chp_qty'], "IORV");
                if($w_rtn != 0){
                        db_rollback();
                        return $w_rtn;
                }
        }

	#------------------------------------------------------------------
	# Lot information parent lot id
	#------------------------------------------------------------------
	$w_rtn = ins_prnlot_id($w_lot_id, $w_lot_id, "IORV");
	if($w_rtn != 0){
		db_rollback();
		return $w_rtn;
	}
	if($w_rtn != 0) return 4000;

        #------------------------------------------------------------------
        # STD-810-2011-03-25-002
        #------------------------------------------------------------------
        $w_rtn = cs_xexc_hold_rsv($gw_scr['s_usr_id'],
                                                                $w_lot_bas,
                                                                $w_hold_exe_flg,
                                                                $w_setday,
                                                                $w_rsn,
                                                                $w_tel);
        if($w_rtn != 0){
                db_rollback();
                $g_err_lv = 0;
                $g_msg = xpt_err_msg($g_msg, trim($w_lot_bas['LOT_ID']), __LINE__);
                return 4000;
        }

        if($w_hold_exe_flg == 1){
                list($w_hdmsg, $w_hdlv) = msg("End_Rsv_Hold");
                $w_hdmsg .= "<br>";
                $w_hdmsg .= item("RsvHoldInfo");
                $w_hdmsg = sprintf($w_hdmsg, $w_rsn, $w_tel, $w_setday);
        }

        if($w_bcrt_flg != 0) {
                #------------------------------------------------------------------
                # MTIN
                #------------------------------------------------------------------
                $w_mgz_id = explode(",",$w_magazine_id);
                for($a = 0; $a < count($w_mgz_id); $a++) {
                        $w_rtn = main_verb_mtin($gw_scr['s_usr_id'], $w_lot_bas['LOT_ID'],trim($w_mgz_id[$a]));
                                if($w_rtn != 0){
                                return 4000;
                        }

                        #------------------------------------------------------------------
                        # Insert Magazine
                        #------------------------------------------------------------------
                        $w_rtn = ins_mgznid($gw_scr['s_usr_id'],$w_lot_bas['LOT_ID'],trim($w_mgz_id[$a]), "IOOT");
                        if($w_rtn != 0){
                                return 4000;
                        }
                }
        }
        if($w_rgbr_flg > 0) {
                if($w_rgbr_flg == 2) {
                        $w_rtn = ins_lot_inf_tbl($gw_scr['s_usr_id'],
                                                                 $w_lot_bas['LOT_ID'],
                                                                 constant("CE_LTINF"),
                                                                 constant("CT_TTLRING"),
                                                                 " ",
                                                                 "",
                                                                 $w_rg_qty,
                                                                 "IOOT");
                } else {
                        $w_rtn = ins_lot_inf_tbl($gw_scr['s_usr_id'],
                                                                 $w_lot_bas['LOT_ID'],
                                                                 constant("CE_LTINF"),
                                                                 constant("CT_TTLBAR"),
                                                                 " ",
                                                                 "",
                                                                 $gw_scr['s_br_qty'],
                                                                 "IOOT");

                }
        }
        #------------------------------------------------------------------
        # Insert
        #------------------------------------------------------------------
        if($w_lot_cls_cd == constant('CC_RTRN')){
                 if($w_ret_rsn != ""){
                        $w_rtn = ins_lot_inf_tbl($gw_scr['s_usr_id'],
                                         $w_lot_bas['LOT_ID'],
                                         constant("CE_LTINF"),
                                         constant("CT_RETURN"),
                                         " ",
                                         $w_ret_rsn,
                                         "",
                                         "IORV");
                 }

        }
        #------------------------------------------------------------------
        # get Bind No
        #------------------------------------------------------------------
        $w_cd = trim($w_lot_bas['DVSN_CD_PRD']) . "_" . date("ymd");
        $w_cntdvs = constant("BIND_CNT_DVS");
        $w_rtn = xgt_cd_cnt($gw_scr['s_usr_id'], $w_cd, $w_cntdvs, $w_cnt);
        if($w_rtn != 0){
                $g_err_lv = 0;
                $g_msg = xpt_err_msg($g_msg, "", __LINE__);
                return 4000;
        }

        # WIP + division code + DDMMYY + 4dgts sequential
        $r_bind_no = constant("BIND_PRFX")
                                . substr(trim($w_lot_bas['DVSN_CD_PRD']), -2)
                                . date("ymd")
                                . sprintf("%04s", $w_cnt);

        #------------------------------------------------------------------
        # LOG_BIND_TBL insert
        #------------------------------------------------------------------
        $w_rtn = ins_log_bind_tbl($gw_scr['s_usr_id'],
                                                                $r_bind_no,
                                                                1,
                                                                $w_lot_bas['LOT_ID'],
                                                                "IORV",
                                                                $w_lot_bas['STP_CD']);


        #------------------------------------------------------------------
        # LOG_BIND_INF insert
        #------------------------------------------------------------------
        $w_rtn = ins_log_bind_inf($gw_scr['s_usr_id'],
                                                        $r_bind_no,
                                                        constant("WIPNOTE_HINA_RCV"),
                                                        "IORV");

        $w_table = 'CTG_LOG';
        $w_dat = array
                (
                        'DEL_FLG'       => '0',
                        'CTG_DVS_CD'    => 'CE00S02',
                        'PRD_CD'        => $w_lot_bas['PRD_CD'],
                        'PRC_CD'        => $w_lot_bas['PRC_CD'],
                        'STP_NO'        => $w_lot_bas['STP_NO'],
                        'PRC_CLS_4'     => $w_lot_bas['PRC_CLS_4'],
                        'STP_CD'        => $w_lot_bas['STP_CD'],
                        'CTG_CD'        => 'CT00S0000025',
                        'LOT_ID'        => $w_lot_bas['LOT_ID'],
                        'EQU_CD'        => ' ',
                        'QTY'           => 0,
                        'SL_ID'         => '',
                        'CTG_DAT_TXT'   => $gw_scr['s_usr_id'],
                        'CRT_DTS'       => $g_cpu_dts,
                        'USR_ID_CRT'    => $gw_scr['s_usr_id'],
                        'UPD_DTS'       => $g_low_dts,
                        'USR_ID_UPD'    => ' ',
                        'UPD_LEV'       => 1
                );

        # DB Insert
        $w_rtn = db_insert($w_table, $w_dat);
        if ($w_rtn != 0) {
                list($g_msg, $g_err_lv) = msg("err_Add_LotInfTbl");
                $g_msg = xpt_err_msg($g_msg, $w_sp_lot_id[$i], __LINE__);
                return 4000;
        }


        $w_new_lot_id = $w_lot_bas['LOT_ID'];


        return 0;
}

#==================================================================
# End Receive
#==================================================================

#===========================================================================
# get_UnixSec
#===========================================================================
function get_UnixSec($w_date_time)
{

        list($w_yyyy, $w_mm, $w_dd, $w_hh, $w_mi, $w_ss) = preg_split('/[\-: ]/', $w_date_time);

        $w_unix_epoch= mktime($w_hh, $w_mi, $w_ss, $w_mm, $w_dd, $w_yyyy);

        return $w_unix_epoch;
}

#==================================================================
# Convert to date
#==================================================================
function convert_to_date(&$w_slc_info)
{
        for($i=0; $i<count($w_slc_info); $i++){
                $w_tmp_date = $w_slc_info[$i]['CTG_DAT_VAL'];
                $w_tmp_date_arr = explode(".", $w_tmp_date);

                if(count($w_tmp_date_arr) > 1){
                        $w_year = substr($w_tmp_date_arr[0], 0, 4);
                        $w_month = substr($w_tmp_date_arr[0], 4, 2);
                        $w_day = substr($w_tmp_date_arr[0], 6, 2);

                        $w_thour = substr($w_tmp_date_arr[1], 0, 2);
                        $w_tmin = substr($w_tmp_date_arr[1], 2, 2);
                        if(strlen($w_tmin) != 2){
                                $w_tmin .= "0";
                        }
                        $w_tsec = "00";

                        $w_slc_info[$i]['DATE'] = $w_year ."-". $w_month."-".$w_day." ".$w_thour.":".$w_tmin.":".$w_tsec;
                }
                else{
                        return 4000;
                }
        }
        return 0;
}

#==================================================================
# Compare date function
#==================================================================
function cmp_date($a, $b)
{
        return $a['DATE'] > $b['DATE'];
}


#==================================================================
# Make Dates to Distinct and Get All Distinct Date
#==================================================================
function get_unique_dates($w_slc_info, &$r_uni_dates){
        $r_uni_dates = array();
        foreach($w_slc_info as $w_slc){
                if(! in_array($w_slc['DATE'], $r_uni_dates)){
                        $r_uni_dates[] = $w_slc['DATE'];
                }
        }
        return 0;
}

function get_MBN_Lots($w_equ_cd, &$r_dat){

        global $gw_scr;
        global $g_msg;
        global $g_err_lv;

        $w_dat = array();
        $w_sql = "
SELECT
        DISTINCT
        TBL.LOT_ID
FROM
        LOT_LOG  LOG,
        LOT_BAS_TBL TBL,
        NON_STD_CTG_LOG CTG
WHERE
        LOG.equ_cd  = '{$w_equ_cd}' AND
        LOG.LOT_ID = TBL.LOT_ID AND
        LOG.STP_CD = TBL.STP_CD AND
        LOG.VERB = 'IOOT' AND
        LOG.DEL_FLG = '0' AND
        TBL.LOT_ST_DVS = 'HD' AND
        TBL.LOT_ID = CTG.LOT_ID AND
        CTG.DEL_FLG = '0' AND
        CTG.CTG_RLT_1 = 'MBN' AND
        CTG.JDG_RLT_1 != 'OK'
        ";

        $w_stmt = db_res_set($w_sql);
        $w_rtn  = db_do($w_stmt);
        if($w_rtn != 0){
                list($g_msg, $g_err_lv) = msg("err_Sel_MBN");
                $g_msg = xpt_err_msg($g_msg, "", __LINE__);
                return $w_rtn;
        }


        $cnt = 0;
        while($w_row = db_fetch_row($w_stmt)){
                $cnt++;
                $w_dat[$cnt] = trim($w_row['LOT_ID']);
        }
        $r_dat = $w_dat;
        db_res_free($w_stmt);
        return 0;
}

###################################################################
#####                                                         #####
#####                                                         #####
###################################################################
#==================================================================
# MAIN MD2
#==================================================================
function main_md2()
{
	global $gw_scr;
	global $g_msg;
	global $g_err_lv;

	switch($gw_scr['s_act']){
	case "CHECK":
		main_md2_chk();
		break;
	case "REDISP":
		main_md2_redisp();
		break;
	case "ERASE":
		set_init(2);
		main_md1_chk();
		break;
	case "BACK":
		set_init(2, 1);
		scr_mode_chg(1);
		break;
	}

	return 0;
}
#==================================================================
# MD2 Chk
#==================================================================
function main_md2_chk()
{
	global $gw_scr;
	global $g_msg;
	global $g_err_lv;

	#------------------------------------------------------------------
	# 
	#------------------------------------------------------------------
	$w_rtn = check_input(2);
	if($w_rtn != 0){
		return 4000;
	}

	#------------------------------------------------------------------
	#
	#------------------------------------------------------------------
	$w_rtn = xgt_lot($gw_scr['s_lot_id'], $w_lot_bas);
	if($w_rtn != 0){
		$g_err_lv = 0;
		$g_msg = xpt_err_msg($g_msg, $gw_scr['s_lot_id'], __LINE__);
		return 4000;
	}

	#------------------------------------------------------------------
	#
	#------------------------------------------------------------------
	if($gw_scr['s_chp_flg'] == "1"){
		$w_chp_qty = 0;

		# Substrate
		$w_rtn = get_prv_qtymng($w_lot_bas,
								$w_subflg);
		if($w_rtn != 0) return 4000;

#		# TODO CHP_QT PRC_MST.PRC_CLS_4='D6SEM05' PRC_MST.STP_NO='1'のとき」PRC_MST.STP_NO???
#		if($w_prcmstinf['PRC_CLS_4'] == constant("D6_INSPECTION") && $w_lot_bas['STP_NO'] == 1){
		if($w_subflg == 1){
			# LOT_INF_TBL
			$w_rtn = get_lotinf($gw_scr['s_lot_id'],  constant("CE_LTINF"), constant("CT_CHIP_QTY"), $w_lotinf_chp_qty);
			if($w_rtn != 0){
				$g_err_lv = 0;
				$g_msg = xpt_err_msg($g_msg, "", __LINE__);
				return 4000;
			}
			
			if (count($w_lotinf_chp_qty) == 0) {
#				list($g_msg, $g_err_lv) = msg("err_NotDatLotInf");
#				$g_msg = xpt_err_msg($g_msg, itm("ChpQty"), __LINE__);
#				return 4000;
				$w_chp_qty = $w_lot_bas['CHP_QTY'];
			} else {
				$w_chp_qty = $w_lotinf_chp_qty['CTG_DAT_VAL'];
			}
		}else{
			# LOT_BAS_TBL CHP_QTY
			$w_chp_qty = $w_lot_bas['CHP_QTY'];
		}
		
		if($gw_scr['s_chp_qty'] != $w_chp_qty){
			list($g_msg, $g_err_lv) = msg("err_DifQty");
			$w_tg = get_tg(itm("ChpQty"), $gw_scr['s_chp_qty']);
			$g_msg = xpt_err_msg($g_msg, $w_tg, __LINE__);
			return 4000;
		}
	}
	### Substrate
	if($gw_scr['s_sub_flg'] == "1"){
		$w_sub_qty = 0;
		$w_rtn = get_lotinf($gw_scr['s_lot_id'],  constant("CE_LTINF"), constant("CT_SUBSTRATE_QTY"), $w_lotinf_sub_qty);
		if($w_rtn != 0){
			$g_err_lv = 0;
			$g_msg = xpt_err_msg($g_msg, "", __LINE__);
			return 4000;
		}
		if (count($w_lotinf_sub_qty) == 0) {
			list($g_msg, $g_err_lv) = msg("err_NotDatLotInf");
			$g_msg = xpt_err_msg($g_msg, itm("SubQty"), __LINE__);
			return 4000;
		}
		
		$w_sub_qty = $w_lotinf_sub_qty['CTG_DAT_VAL'];
		if($gw_scr['s_sub_qty'] != $w_sub_qty){
			list($g_msg, $g_err_lv) = msg("err_DifQty");
			$w_tg = get_tg(itm("SubQty"), $gw_scr['s_sub_qty']);
			$g_msg = xpt_err_msg($g_msg, $w_tg, __LINE__);
			return 4000;
		}
	}
	### Slice
	if($gw_scr['s_sl_flg'] == "1"){
		$w_sl_qty = $w_lot_bas['SL_QTY'];
		if($gw_scr['s_sl_qty'] != $w_sl_qty){
			list($g_msg, $g_err_lv) = msg("err_DifQty");
			$w_tg = get_tg(itm("SliceQty"), $gw_scr['s_sl_qty']);
			$g_msg = xpt_err_msg($g_msg, $w_tg, __LINE__);
			return 4000;
		}
	}
	#------------------------------------------------------------------
	#
	#------------------------------------------------------------------
	if ($gw_scr['s_testing_flg'] == "1") {
		$w_rtn = get_rcporgmstinf($w_lot_bas['STP_CD'], $w_lot_bas['PRD_CD'],
				$w_rcpinf);
		if ($w_rtn != 0) {
			$g_err_lv = 0;
			$g_msg = xpt_err_msg($g_msg, "", __LINE__);
			return 4000;
		}
		if (count($w_rcpinf) == 0) {
			list($g_msg, $g_err_lv) = msg("err_Program");
			$g_msg = xpt_err_msg($g_msg, "", __LINE__);
			return 4000;
		}
		#2013-06-24 updated to handle multiple recipies
		/*if ($gw_scr['s_prg_id'] != $w_rcpinf['RCP_NM']
				|| $gw_scr['s_tester'] != $w_rcpinf['TESTER']
				|| $gw_scr['s_fixture'] != $w_rcpinf['FIXTURE']) {
			list($g_msg, $g_err_lv) = msg("err_Program");
			$g_msg = xpt_err_msg($g_msg, "", __LINE__);
			return 4000;
		}*/
		$w_bln_check = FALSE;
		for($w_pgm_cnt=0; $w_pgm_cnt < count($w_rcpinf);$w_pgm_cnt++){
			if(
				$gw_scr['s_prg_id'] == trim($w_rcpinf[$w_pgm_cnt]['RCP_NM'])
				&& $gw_scr['s_tester'] == trim($w_rcpinf[$w_pgm_cnt]['TESTER'])
				&& $gw_scr['s_fixture'] == trim($w_rcpinf[$w_pgm_cnt]['FIXTURE'])
			){
				$w_bln_check = TRUE;
			}
		}
		if(!$w_bln_check){

			list($g_msg, $g_err_lv) = msg("err_Program");
			$g_msg = xpt_err_msg($g_msg, "", __LINE__);
			return 4000;
		}

		#start board and len pin validation
		$w_rtn = get_board_pin_and_lens_pin(trim($gw_scr['s_fixture']), $w_pin_arr); 
		if ($w_rtn != 0) {
			$g_err_lv = 0;
			$g_msg = xpt_err_msg($g_msg, "", __LINE__);
			return 4000;
		}
		if (count($w_pin_arr) == 0) {
			list($g_msg, $g_err_lv) = msg("err_Program2");
			$g_msg = xpt_err_msg($g_msg, "", __LINE__);
			return 4000;
		}
		$w_bln_check2 = FALSE;
		for($w_pgm_cnt=0; $w_pgm_cnt < count($w_pin_arr);$w_pgm_cnt++){
			if(
				$gw_scr['s_board_pin'] == trim($w_pin_arr[$w_pgm_cnt]['BOARD_PIN'])
				&& $gw_scr['s_len_pin'] == trim($w_pin_arr[$w_pgm_cnt]['LENS_PIN'])
			){
				$w_bln_check2 = TRUE;
			}
		}
		if(!$w_bln_check2){
			list($g_msg, $g_err_lv) = msg("err_Program2");
			$g_msg = xpt_err_msg($g_msg, "", __LINE__);
			return 4000;
		}
		#end board and pin validation

	}
	

	#echo "md2 chk" . $gw_scr['s_pic_prsl_testing_flg'];
	
	# checking pic perusal validation
	if ($gw_scr['s_pic_prsl_testing_flg'] == "1") {
		if($gw_scr['s_powerEye_input'] < 0){
			list($g_msg, $g_err_lv) = msg("err_Neg");
			$w_tg = get_tg(itm("PowerEyeInputQty"), $gw_scr['s_powerEye_input']);
			$g_msg = xpt_err_msg($g_msg, $w_tg, __LINE__);
			return 4000;
		}
		if($gw_scr['s_powerEye_output'] < 0){
			list($g_msg, $g_err_lv) = msg("err_Neg");
			$w_tg = get_tg(itm("PowerEyeOutputQty"), $gw_scr['s_powerEye_output']);
			$g_msg = xpt_err_msg($g_msg, $w_tg, __LINE__);
			return 4000;
		}
		if($gw_scr['s_powerEye_failure'] < 0){
			list($g_msg, $g_err_lv) = msg("err_Neg");
			$w_tg = get_tg(itm("PowerEyeFailureQty"), $gw_scr['s_powerEye_failure']);
			$g_msg = xpt_err_msg($g_msg, $w_tg, __LINE__);
			return 4000;
		}
		#Input Qty can't greater than QTY of Lot ID
		if($gw_scr['s_powerEye_input'] >= $w_chp_qty){
			list($g_msg, $g_err_lv) = msg("err_p_input_chp");
			$w_tg = get_tg(itm("PowerEyeInputQty"), $gw_scr['s_powerEye_input']);
			$g_msg = xpt_err_msg($g_msg, $w_tg, __LINE__);
			return 4000;
		}
		#Output Qty can't greater than QTY of Lot ID
		if($gw_scr['s_powerEye_output'] >= $w_chp_qty){
			list($g_msg, $g_err_lv) = msg("err_p_qty_chp");
			$w_tg = get_tg(itm("PowerEyeOutputQty"), $gw_scr['s_powerEye_output']);
			$g_msg = xpt_err_msg($g_msg, $w_tg, __LINE__);
			return 4000;
		}
		if($gw_scr['s_powerEye_failure'] >= $w_chp_qty){
			list($g_msg, $g_err_lv) = msg("err_p_qty_chp");
			$w_tg = get_tg(itm("PowerEyeFailureQty"), $gw_scr['s_powerEye_failure']);
			$g_msg = xpt_err_msg($g_msg, $w_tg, __LINE__);
			return 4000;
		}



	}
	# end checking pic perusal validation
	
	#------------------------------------------------------------------
	#
	#------------------------------------------------------------------
	if($gw_scr['s_mgzn_flg'] == "1"){
		for($i=1; $i<= $gw_scr['s_h_disp_row']; $i++){
			if($gw_scr['s_list_mgzn_id'][$i] == ""){
				continue;
			}
			for($j=$i+1; $j<= $gw_scr['s_h_disp_row']; $j++){
				if($gw_scr['s_list_mgzn_id'][$j] == ""){
					continue;
				}
				if($gw_scr['s_list_mgzn_id'][$i] == $gw_scr['s_list_mgzn_id'][$j]){
					list($g_msg, $g_err_lv) = msg("err_Inp_Dup");
					$w_tg = get_tg(itm("MgznID"), $gw_scr['s_list_mgzn_id'][$i]);
					$g_msg = xpt_err_msg($g_msg, $w_tg, __LINE__);
					return 4000;
				}
			}
		}

		$cnt = 0;
		$w_arr_mgznid = array();
		for($i=1; $i<= $gw_scr['s_h_disp_row']; $i++){
			if($gw_scr['s_list_mgzn_id'][$i] == ""){
				continue;
			}
			$cnt++;
			$w_arr_mgznid[$cnt] = $gw_scr['s_list_mgzn_id'][$i];
		}

		$w_rtn = cs_xck_jig_chk_in(trim($w_lot_bas['PRC_CD']),
								   trim($w_lot_bas['STP_CD']),
								   trim($w_lot_bas['PRD_CD']),
								   trim($gw_scr['s_lot_id']),
								   constant("JI_JIG"),
								   constant("SH_JIG"),
								   $w_arr_mgznid);
		if($w_rtn != 0){
			$g_err_lv = 0;
			$g_msg = xpt_err_msg($g_msg, "", __LINE__);
			return 4000;
		}
	}
	$gw_scr['s_disp_row'] = $gw_scr['s_h_disp_row'];

	#------------------------------------------------------------------
	# Check SPACE
	#------------------------------------------------------------------
	$w_rtn = chk_space($gw_scr['s_usr_id'],
						$w_lot_bas['LOT_ID'],
						"Y",
						$w_lot_bas['PRD_CD'],
						$w_lot_bas['STP_CD'],
						$gw_scr['s_equ_cd'],
						$w_lot_bas['CHP_QTY'],
						"",
						$gw_scr['s_prg_id'],
						$w_spc_err_cd,
						$w_spc_err_nm,
						$w_spc_err_msg);
	if($w_rtn != 0) return 4000;

	### xxxx
	if($w_spc_err_cd != "xxxxx1"){
		list($g_msg, $g_err_lv) = msg("err_Err_Space");
		$g_msg = xpt_err_msg($g_msg, $w_spc_err_msg, __LINE__);
		return 4000;
	}

	$w_warn = array();
	#------------------------------------------------------------------
        # Checking Backfill 
        #------------------------------------------------------------------
        $w_rtn = chk_backfill_in($gw_scr['s_usr_id'],
                                                $w_lot_bas['LOT_ID'],
                                                "Y",
                                                $w_lot_bas['PRD_CD'],
                                                $w_lot_bas['STP_CD'],
                                                $gw_scr['s_equ_cd'],
                                                $w_lot_bas['CHP_QTY'],
                                                "",
                                                $gw_scr['s_prg_id'],
                                                $w_web_err_cd,
                                                $w_web_err_nm,
                                                $w_web_err_msg);
        if($w_rtn != 0) return 4000;
	
        if($w_web_err_cd == "0"){
                list($g_msg, $g_err_lv) = msg("err_Err_backfill");
                $g_msg = xpt_err_msg($g_msg, $w_web_err_nm, __LINE__);
                return 4000;
        }

        if($w_web_err_cd == "2"){
                list($g_msg, $g_err_lv) = msg("err_Warn_backfill");
                $g_msg = xpt_err_msg($g_msg, $w_web_err_nm, __LINE__);
                $w_warn[] = $g_msg;
        }

	#------------------------------------------------------------------
	#
	#------------------------------------------------------------------
	if($gw_scr['s_prt_ctrl'] == "1"){
		$w_rtn = chk_usemat();
		if($w_rtn != 0) return 4000;
	}



	if(count($w_warn) <= 0){
		#------------------------------------------------------------------
		#
		#------------------------------------------------------------------
		list($g_msg, $g_err_lv) = msg("guid_Execute");
		$g_msg = xpt_err_msg($g_msg, "", "");
	}

	scr_mode_chg(3);

	return 0;
}
#==================================================================
#
#==================================================================
function main_md2_redisp()
{
	global $gw_scr;
	global $g_msg;
	global $g_err_lv;

	#------------------------------------------------------------------
	# 
	#------------------------------------------------------------------
	$gw_scr['s_disp_row'] = trim($gw_scr['s_disp_row']);

	#------------------------------------------------------------------
	# 
	#------------------------------------------------------------------
	if($gw_scr['s_disp_row'] == ""){
		list($g_msg, $g_err_lv) = msg("err_Nec_Input");
		$g_msg = xpt_err_msg($g_msg, itm("DispRow"), __LINE__);
		return 4000;
	}

	#------------------------------------------------------------------
	# 
	#------------------------------------------------------------------
	if(!check_num($gw_scr['s_disp_row'])){
		list($g_msg, $g_err_lv) = msg("err_Inp_Char");
		$w_tg = get_tg(itm("DispRow"), $gw_scr['s_disp_row']);
		$g_msg = xpt_err_msg($g_msg, $w_tg, __LINE__);
		return 4000;
	}

	#------------------------------------------------------------------
	#
	#------------------------------------------------------------------
	if($gw_scr['s_disp_row'] < constant("MIN_MGZN_ROW") ||
	   $gw_scr['s_disp_row'] > constant("MAX_MGZN_ROW")){
		list($g_msg, $g_err_lv) = msg("err_Inp_Over");
		$w_tg = get_tg(itm("DispRow"), $gw_scr['s_disp_row']);
		$g_msg = xpt_err_msg($g_msg, $w_tg, __LINE__);
		return 4000;
	}

	$gw_scr['s_h_disp_row'] = $gw_scr['s_disp_row'];

	return 0;
}

###################################################################
#####                                                         #####
##### Main Md3                                                #####
#####                                                         #####
###################################################################
#==================================================================
# Main Md3
#==================================================================
function main_md3()
{
	global $gw_scr;
	global $g_msg;
	global $g_err_lv;

	switch($gw_scr['s_act']){
	case "EXECUTE":
		main_md3_exe();
		break;
	case "BACK":
		set_init(3);
		scr_mode_chg(2);
		break;
	}

	return 0;
}

#==================================================================
# Execution
#==================================================================
function main_md3_exe()
{
	global $gw_scr;
	global $g_msg;
	global $g_err_lv;

	#------------------------------------------------------------------
	#
	#------------------------------------------------------------------
	db_begin();

	#------------------------------------------------------------------
	#
	#------------------------------------------------------------------
	$w_rtn = main_exe();
	if($w_rtn != 0){
		db_rollback();
		return 4000;
	}

	#------------------------------------------------------------------
	# 
	#------------------------------------------------------------------
	db_commit();

	scr_mode_chg(4);

	return 0;
}

#==================================================================
# Main Exe
#==================================================================
function main_exe()
{
	global $gw_scr;
	global $g_msg;
	global $g_err_lv;
	global $g_cpu_dts;
	global $g_low_dts;

	#------------------------------------------------------------------
	# Check Input 2
	#------------------------------------------------------------------
	$w_rtn = check_input(2);
	if($w_rtn != 0){
		return 4000;
	}

	#------------------------------------------------------------------
	# 
	#------------------------------------------------------------------
	$w_rtn = xgt_lot($gw_scr['s_lot_id'], $w_lot_bas);
	if($w_rtn != 0){
		$g_err_lv = 0;
		$g_msg = xpt_err_msg($g_msg, $gw_scr['s_lot_id'], __LINE__);
		return 4000;
	}

	#------------------------------------------------------------------
	#
	#------------------------------------------------------------------
	$w_rtn = xck_upd($gw_scr['s_upd_lev'], $w_lot_bas['UPD_LEV']);
	if($w_rtn != 0){
		$g_err_lv = 0;
		$g_msg = xpt_err_msg($g_msg, "", __LINE__);
		return 4000;
	}

	#------------------------------------------------------------------
	# 
	#------------------------------------------------------------------
	if ($gw_scr['s_prt_ctrl'] == "1") {
		$w_rtn = main_exe_chkmat($w_lot_bas, $w_is_hold);
		if ($w_rtn != 0){
			return 4000;
		}
		if ($w_is_hold == 1) {
			return 0;
		}
	}
	
	#------------------------------------------------------------------
	# SPACE
	#------------------------------------------------------------------
	$w_rtn = chk_space($gw_scr['s_usr_id'],
						$w_lot_bas['LOT_ID'],
						"N",
						$w_lot_bas['PRD_CD'],
						$w_lot_bas['STP_CD'],
						$gw_scr['s_equ_cd'],
						$w_lot_bas['CHP_QTY'],
						"",
						$gw_scr['s_prg_id'],
						$w_spc_err_cd,
						$w_spc_err_nm,
						$w_spc_err_msg);
	if($w_rtn != 0) return 4000;

	if($w_spc_err_cd != "xxxxx1"){
		list($g_msg, $g_err_lv) = msg("err_Err_Space");
		$g_msg = xpt_err_msg($g_msg, $w_spc_err_msg, __LINE__);
		return 4000;
	}

	#------------------------------------------------------------------
        # Backfill Checking
        #------------------------------------------------------------------
        $w_rtn = chk_backfill_in($gw_scr['s_usr_id'],
                                                $w_lot_bas['LOT_ID'],
                                                "N",
                                                $w_lot_bas['PRD_CD'],
                                                $w_lot_bas['STP_CD'],
                                                $gw_scr['s_equ_cd'],
                                                $w_lot_bas['CHP_QTY'],
                                                "",
                                                $gw_scr['s_prg_id'],
                                                $w_web_err_cd,
                                                $w_web_err_nm,
                                                $w_web_err_msg);
        if($w_rtn != 0) return 4000;
	###
        if($w_web_err_cd == "0"){
                list($g_msg, $g_err_lv) = msg("err_Err_backfill");
                $g_msg = xpt_err_msg($g_msg, $w_web_err_nm, __LINE__);
                return 4000;
        }

        if($w_web_err_cd == "2"){
                list($g_msg, $g_err_lv) = msg("err_Warn_backfill");
                $g_msg = xpt_err_msg($g_msg, $w_web_err_nm, __LINE__);
                $w_warn[] = $g_msg;
        }

        #------------------------------------------------------------------
        # Get physical qty from AutoVI Trackout
        #------------------------------------------------------------------
        if($gw_scr['s_physical_qty_flg'] == "1") {

                if( trim($gw_scr['s_db_rejects_qty']) > 0) {
                        $w_rtn = receive_in_exe($w_lot_bas, $w_receive_lot_id);
                        if($w_rtn != 0){
                                $g_err_lv = 0;
                                $g_msg = xpt_err_msg($g_msg, "", __LINE__);
                                db_rollback();
                                return 4000;
                        }

			$w_tmp_lot_id_arr[1] = trim($w_lot_bas['LOT_ID']);
			$w_tmp_lot_id_arr[2] = trim($w_receive_lot_id);
			$w_rtn = cs_xexc_iomg($gw_scr['s_usr_id'], $w_tmp_lot_id_arr);
			if($w_rtn != 0) {
                                $g_err_lv = 0;
                                $g_msg = xpt_err_msg($g_msg, "", __LINE__);
                                db_rollback();
                                return 4000;

			}

			#------------------------------------------------------------------
		        # Refresh the lot
		        #------------------------------------------------------------------
		        $w_rtn = xgt_lot($gw_scr['s_lot_id'], $w_lot_bas);
		        if($w_rtn != 0){
		                $g_err_lv = 0;
		                $g_msg = xpt_err_msg($g_msg, $gw_scr['s_lot_id'], __LINE__);
		                return 4000;
		        }

			# Wait 1 second
			sleep(1);

			# Update level and date
			$gw_scr['s_upd_lev'] = $w_lot_bas['UPD_LEV'];
			$g_cpu_dts = date('Y-m-d H:i:s');
			
                }

		
        }

        #------------------------------------------------------------------
        # Get Update Level
        #------------------------------------------------------------------
        $w_rtn = xck_upd($gw_scr['s_upd_lev'], $w_lot_bas['UPD_LEV']);
        if($w_rtn != 0){
                $g_err_lv = 0;
                $g_msg = xpt_err_msg($g_msg, "", __LINE__);
                return 4000;
        }


	#------------------------------------------------------------------
	# IOIN
	#------------------------------------------------------------------
	$w_rtn = main_ioin_verb($gw_scr['s_usr_id'],
							$gw_scr['s_equ_cd'],
							$gw_scr['s_cmt'],
							$w_lot_bas);
	if($w_rtn != 0){
		return 4000;
	}

	#------------------------------------------------------------------
	# Save CTG_LOG 
	#------------------------------------------------------------------
	#s_prg_id, s_tester, s_fixture
	if ($gw_scr['s_testing_flg'] == 1){
		
		$w_rtn = ins_ctg_log(constant('CE_LTINF'), constant('CT_TEST_PGM'), $gw_scr['s_prg_id'], $w_lot_bas);
		if($w_rtn != 0){
			return 4000;
		}
		
		$w_rtn = ins_ctg_log(constant('CE_LTINF'), constant('CT_TEST_FIXTURE'), $gw_scr['s_fixture'], $w_lot_bas);
		if($w_rtn != 0){
			return 4000;
		}
		
		$w_rtn = ins_ctg_log(constant('CE_LTINF'), constant('CT_TEST_TESTER'), $gw_scr['s_tester'], $w_lot_bas);
		if($w_rtn != 0){
			return 4000;
		}

		// 		If user need to input board pin and len pin, insert board pin and len pin. 																								
		// follow normal program fixture data, insert to ctg_log																								
		// << CT00S0000396 , CT00S0000397 >>																								
		$w_rtn = ins_ctg_log(constant('CE_LTINF'), constant('CT_TEST_BOARD_PIN'), $gw_scr['s_board_pin'], $w_lot_bas);
		if($w_rtn != 0){
			return 4000;
		}

		$w_rtn = ins_ctg_log(constant('CE_LTINF'), constant('CT_TEST_LEN_PIN'), $gw_scr['s_len_pin'], $w_lot_bas);
		if($w_rtn != 0){
			return 4000;
		}

	}
	
	if ($gw_scr['s_pic_prsl_testing_flg'] == 1){
		
		$w_rtn = ins_ctg_log(constant('CE_LTINF'), constant('CT_POWER_EYE_INPUT'), $gw_scr['s_powerEye_input'], $w_lot_bas);
		if($w_rtn != 0){
			return 4000;
		}
		
		$w_rtn = ins_ctg_log(constant('CE_LTINF'), constant('CT_POWER_EYE_OUTPUT'), $gw_scr['s_powerEye_output'], $w_lot_bas);
		if($w_rtn != 0){
			return 4000;
		}
		
		$w_rtn = ins_ctg_log(constant('CE_LTINF'), constant('CT_POWER_EYE_FAIL'), $gw_scr['s_powerEye_failure'], $w_lot_bas);
		if($w_rtn != 0){
			return 4000;
		}

		$w_rtn = ins_ctg_log(constant('CE_LTINF'), constant('CT_POWER_EYE_YIELD'), $gw_scr['s_powerEye_yield'], $w_lot_bas);
		if($w_rtn != 0){
			return 4000;
		}

		$w_rtn = ins_ctg_log(constant('CE_LTINF'), constant('CT_POWER_EYE_USER_ID'), $gw_scr['s_powerEye_userId'], $w_lot_bas);
		if($w_rtn != 0){
			return 4000;
		}
	}

	# Release of magazine IDs
        if($gw_scr['s_mgzn_flg'] == "1"){

        	#------------------------------------------------------------------
        	# search magazine control setting
        	#------------------------------------------------------------------
        	$w_rtn = cs_xck_jig_srch(trim($w_lot_bas['PRC_CD']),
                                                         trim($w_lot_bas['STP_CD']),
                                                         trim($w_lot_bas['PRD_CD']),
                                                         constant("JI_JIG"),
                                                         $w_prt_grp_b, $w_prt_grp_a, $w_jig_chg_id);
        	if($w_rtn != 0){
                	$g_err_lv = 0;
                	$g_msg = xpt_err_msg($g_msg, "", __LINE__);
                	return 4000;
        	}
        	### magazine control step
        	if($r_prt_grp_a != ""){
                	#------------------------------------------------------------------
                	# get current magazine ID
                	#------------------------------------------------------------------
                	$w_rtn = cs_xck_jig_get_lot(trim($w_lot_bas['LOT_ID']), constant("JI_JIG"), "2", $w_prt_grp_b,
                                                                        $w_prt_grp_a, $w_jig_chg_id, $w_mag_id_b);
                	if($w_rtn != 0){
                        	$g_err_lv = 0;
                        	$g_msg = xpt_err_msg($g_msg, "", __LINE__);
                        	return 4000;
                	}
        	}

        	$w_chk = "";
        	### new
        	if($w_prt_grp_a != "" && $w_prt_grp_b == "" && $w_jig_chg_id == "CHG"){
                	$w_chk = "1";
        	}
        	### change
        	if($w_prt_grp_a != "" && $w_prt_grp_b != "" && $w_jig_chg_id == "CHG"){
                	$w_chk = "2";
        	}
        	### hold(not change)
        	if($w_prt_grp_a != "" && $w_prt_grp_b != "" && $w_jig_chg_id == "HOLD"){
                	$w_chk = "3";
        	}
        	### delete
    		if($w_prt_grp_a == "" && $w_prt_grp_b != "" && $w_jig_chg_id == "CHG"){
                	$w_chk = "4";
        	}

        	### case change or delete
        	if($w_chk == "2" || $w_chk == "4"){
                	#------------------------------------------------------------------
                	# MTOT
                	#------------------------------------------------------------------
                	$w_rtn = main_verb_mtot($gw_scr['s_usr_id'], $w_lot_bas['LOT_ID']);
                	if($w_rtn != 0){
                        	return 4000;
               	 	}

                	#------------------------------------------------------------------
                	# delete magazine info(DEL_FLG=1)
                	#------------------------------------------------------------------
                	$w_rtn = del_mgzn($gw_scr['s_usr_id'], "IOOT", $w_lot_bas['LOT_ID']);
                	if($w_rtn != 0){
                        	return 4000;
                	}
        	}	

	}

	#------------------------------------------------------------------
	# 
	#------------------------------------------------------------------
	if($gw_scr['s_prt_ctrl'] == "1"){
		$w_rtn = main_exe_usemat($w_lot_bas);
		if($w_rtn != 0) return 4000;
	}

	#------------------------------------------------------------------
	# Metal Weight
	#------------------------------------------------------------------
	$w_new_baking_cnt = $gw_scr['s_max_bake_cnt'] + 1;
	if($gw_scr['s_stp_cls_2'] == constant("E9_BAKING")){
		# Delete metal weight if the count is more than one
		
		if($w_new_baking_cnt > 1 ){
			$w_upd = array
			(
				"DEL_FLG"		=> "1",
				"USR_ID_UPD"	=> $gw_scr['s_usr_id'],
				"UPD_VERB"		=> "IOIN",
				"UPD_DTS"		=> $g_cpu_dts,
				"UPD_LEV"		=> 2
			);
			$w_whr = "LOT_ID = '" . $gw_scr['s_lot_id']. "' "
					. "AND CTG_DVS_CD = '" . constant("CE_LTINF") . "' "
					. "AND CTG_CD = '" . constant("CT_METAL_WEIGHT") . "' "
					. "AND CTG_DAT_VAL = '" . $gw_scr['s_max_bake_cnt'] . "' "
					. "AND DEL_FLG = '0'";

			$w_rtn = db_update_one("LOT_INF_TBL", $w_upd, $w_whr);
			if($w_rtn != 0){
				list($g_msg, $g_err_lv) = msg("err_Upd");
				$g_msg = xpt_err_msg($g_msg, "LOT_INF_TBL " , __LINE__);
				return 4000;
			}
		
		}
		
		$w_rtn = ins_lot_inf_tbl($gw_scr['s_usr_id'],
								 $gw_scr['s_lot_id'],
								 constant("CE_LTINF"),
								 constant("CT_METAL_WEIGHT"),
								 " ",
								 $gw_scr['s_metal_wght'],
								 $w_new_baking_cnt,
								 "IOIN");
		if($w_rtn != 0){
			return 4000;
		}
	}
	#------------------------------------------------------------------
	# POST MOLD CURE AND BAKING
	#------------------------------------------------------------------
	
	if ( $gw_scr['s_stp_cls_2'] == constant("E9_BAKING")) {
		
		$w_ctg_cd = "";
		$w_ctg_cd = constant("CT_BAKING_TIME_BAKING");
				
		#if w_ctg_cd == 'CT_BAKING_TIME_BAKING' then make sure to delete previous lot_inf_tbl before inserting
		# Delete baking time in
		if($w_new_baking_cnt > 1 ){
			$w_upd = array
			(
					"DEL_FLG"		=> "1",
					"USR_ID_UPD"	=> $gw_scr['s_usr_id'],
					"UPD_VERB"		=> "IOIN",
					"UPD_DTS"		=> $g_cpu_dts,
					"UPD_LEV"		=> 2
			);
			$w_whr = "LOT_ID = '" . $gw_scr['s_lot_id'] . "' "
						. "AND CTG_DVS_CD = '" . constant("CE_LTINF") . "' "
						. "AND CTG_CD = '" . $w_ctg_cd . "' "
						. "AND CTG_DAT_VAL = '" . $gw_scr['s_max_bake_cnt'] . "' "
						. "AND DEL_FLG = '0'";

			$w_rtn = db_update_one("LOT_INF_TBL", $w_upd, $w_whr);
			if($w_rtn != 0){
				list($g_msg, $g_err_lv) = msg("err_Upd");
				$g_msg = xpt_err_msg($g_msg, "CTG_TBL", __LINE__);
				return 4000;
			}
		}
			
		$w_rtn = ins_lot_inf_tbl($gw_scr['s_usr_id'],
								 $gw_scr['s_lot_id'],
								 constant("CE_LTINF"),
								 $w_ctg_cd,
								 " ",
								 $g_cpu_dts,
								 $w_new_baking_cnt,
								 "IOIN");
		if($w_rtn != 0){
			return 4000;
		}
		
	}
	
	#------------------------------------------------------------------
	# End of Main Execute
	#------------------------------------------------------------------
	list($g_msg, $g_err_lv) = msg("end_Execute");
	$g_msg = xpt_err_msg($g_msg, "", "");
	
	return 0;
}



# START OF MAGAZINE RELATED FUNCTION
#==================================================================
# VERB::MTOT
#==================================================================
function main_verb_mtot($w_usr_id, $w_lot_id)
{
        global $g_msg;
        global $g_err_lv;

        #------------------------------------------------------------------
        # get the magazine info
        #------------------------------------------------------------------
        $w_rtn = get_mgzn($w_lot_id, $w_arr_mag_id);
        if($w_rtn != 0){
                return 4000;
        }

        #------------------------------------------------------------------
        # get the parts WIP info
        #------------------------------------------------------------------
        $w_tmpsql = <<<_SQL
SELECT
        *
FROM
        PRT_WIP_TBL
WHERE
        MT_LOT_ID = '%s'
_SQL;

        #------------------------------------------------------------------
        # MTOT for all acquired magazine ID
        #------------------------------------------------------------------
        for($i=1; $i<=count($w_arr_mag_id); $i++){
                #------------------------------------------------------------------
                # get the PRT_WIP_TBL
                #------------------------------------------------------------------
                $w_sql = sprintf($w_tmpsql, $w_arr_mag_id[$i]);
                $w_stmt = db_res_set($w_sql);
                $w_rtn = db_do($w_stmt);
                if($w_rtn != 0){
                        list($g_msg, $g_err_lv) = msg("err_Sel");
                        $g_msg = xpt_err_msg($g_msg, "PRT_WIP_TBL", __LINE__);
                        return 4000;
                }
                $w_prtwip = db_fetch_row($w_stmt);
                db_res_free($w_stmt);

                #------------------------------------------------------------------
                # check the material state
                #------------------------------------------------------------------
                $w_rtn = mtot_st_check($w_prtwip);
                if($w_rtn != 0){
                        $g_err_lv = 0;
                        $g_msg = xpt_err_msg($g_msg, "", __LINE__);
                        return 4000;
                }

                #------------------------------------------------------------------
                # get the qty of magazine ID
                #------------------------------------------------------------------
                $w_rtn = get_mgid_cnt($w_arr_mag_id[$i], $w_cnt);
                if($w_rtn != 0){
                        return 4000;
                }

                #------------------------------------------------------------------
                # MTOT
                #------------------------------------------------------------------
                $w_rtn = mtot($w_lot_id,
                                          $w_arr_mag_id[$i],
                                          " ",
                                          $w_usr_id,
                                          $w_prtwip['UPD_LEV'],
                                          "",
                                          $w_prtwip);
                if($w_rtn != 0){
                        $g_err_lv = 0;
                        $g_msg = xpt_err_msg($g_msg, "", __LINE__);
                        return 4000;
                }
        }

        return 0;
}


#==================================================================
# get magazine info
#==================================================================
function get_mgzn($w_lot_id, &$r_mgzn)
{
        global $g_msg;
        global $g_err_lv;

        $r_mgzn   = array();
        $w_ctgdvs = constant("CE_MAG");
        $w_ctgcd  = constant("CT_MAG");

        $w_sql = <<<_SQL
SELECT
        CTG_DAT_TXT
FROM
        LOT_INF_TBL
WHERE
        LOT_ID = '{$w_lot_id}'
        AND CTG_DVS_CD = '{$w_ctgdvs}'
        AND CTG_CD = '{$w_ctgcd}'
        AND DEL_FLG = '0'
ORDER BY
        CTG_DAT_TXT
_SQL;

        $w_stmt = db_res_set($w_sql);
        $w_rtn = db_do($w_stmt);
        if($w_rtn != 0){
                list($g_msg, $g_err_lv) = msg("err_Sel");
                $g_msg = xpt_err_msg($g_msg, "LOT_INF_TBL", __LINE__);
                return 4000;
        }

        $cnt = 0;
        while($w_row = db_fetch_row($w_stmt)){
                $cnt++;
                $r_mgzn[$cnt] = trim($w_row['CTG_DAT_TXT']);
        }

        return 0;
}

#==================================================================
# get qty of magazine ID
#==================================================================
function get_mgid_cnt($w_mgid, &$r_cnt)
{
        global $g_msg;
        global $g_err_lv;

        $r_cnt = 0;
        $w_ce_mag = constant("CE_MAG");
        $w_ct_mag = constant("CT_MAG");

        $w_sql = <<<_SQL
SELECT
        COUNT(*) AS CNT
FROM
        LOT_INF_TBL
WHERE
        CTG_CD = '{$w_ct_mag}'
        AND CTG_DVS_CD = '{$w_ce_mag}'
        AND CTG_DAT_TXT = '{$w_mgid}'
        AND DEL_FLG = '0'
_SQL;

        $w_stmt = db_res_set($w_sql);
        $w_rtn = db_do($w_stmt);
        if($w_rtn != 0){
                list($g_msg, $g_err_lv) = msg("err_Sel");
                $g_msg = xpt_err_msg($g_msg, "LOT_INF_TBL", __LINE__);
                return 4000;
        }

        if($w_row = db_fetch_row($w_stmt)){
                $r_cnt = $w_row['CNT'];
        }
        db_res_free($w_stmt);

        return 0;
}

#==================================================================
# delete(DEL_FLG=1) magazine info
#==================================================================
function del_mgzn($w_usr_id, $w_upd_verb, $w_lot_id)
{
        global $g_msg;
        global $g_err_lv;
        global $g_cpu_dts;

        $w_ctgdvs = constant("CE_MAG");
        $w_ctgcd  = constant("CT_MAG");

        $w_upd = array
        (
                "DEL_FLG"               => "1",
                "UPD_VERB"              => $w_upd_verb,
                "UPD_DTS"               => $g_cpu_dts,
                "USR_ID_UPD"    => $w_usr_id,
                "UPD_LEV"               => "2",
        );

        $w_whr = <<<_SQL
LOT_ID = '{$w_lot_id}'
AND CTG_DVS_CD = '{$w_ctgdvs}'
AND CTG_CD = '{$w_ctgcd}'
AND DEL_FLG = '0'
_SQL;

        $w_rtn = db_update_large("LOT_INF_TBL", $w_upd, $w_whr);
        if($w_rtn != 0){
                list($g_msg, $g_err_lv) = msg("err_Upd");
                $g_msg = xpt_err_msg($g_msg, "LOT_INF_TBL", __LINE__);
                return 4000;
        }

        return 0;
}

# END OF MAGAZINE ID



#======================================================================
#
#======================================================================
function chk_usemat()
{	
	global $gw_scr;
	global $g_msg;
	global $g_err_lv;

	$w_mcnt      = get_session_value('s_mat_cnt', constant("PGM_MTMNG"));
	$w_prt_cd    = get_session_value('s_list_prt_cd', constant("PGM_MTMNG"));
	$w_mt_lot_id = get_session_value('s_list_mt_lot_id', constant("PGM_MTMNG"));

	if($w_mcnt == 0){
		list($g_msg, $g_err_lv) = msg("err_Inp_MatMng");
		$g_msg = xpt_err_msg($g_msg, "", __LINE__);
		return 4000;
	}

	for($i=1; $i<=$w_mcnt; $i++){

		#------------------------------------------------------------------
		# get parts INF - for material consumption checking flag
		#------------------------------------------------------------------
	
		$w_rtn = cs_xck_prt_time($w_prt_cd[$i],
									$w_mt_lot_id[$i],
									$gw_scr['s_shp_cd'],
									$w_thaw_dts,
									$w_life_dts,
									$w_exp_dts);		
		if($w_rtn != 0){
			return 4000;
		}

		if($w_thaw_dts != ""){
			$w_rtn = chk_thaw_time($w_prt_cd[$i],
										$w_mt_lot_id[$i],
										$gw_scr['s_equ_cd'],
										$w_thaw_dts);
			if($w_rtn != 0){
				return 4000;
			}
		}
	}

	return 0;
}
#======================================================================
#
#======================================================================
function main_exe_chkmat($w_lot_bas, &$r_is_hold, $w_noexe = null)
{
	global $gw_scr;
	global $g_msg;
	global $g_err_lv;
	
	$r_is_hold = 0;
	
	$w_mcnt      = get_session_value('s_mat_cnt', constant("PGM_MTMNG"));
	$w_prt_cd    = get_session_value('s_list_prt_cd', constant("PGM_MTMNG"));
	$w_mt_lot_id = get_session_value('s_list_mt_lot_id', constant("PGM_MTMNG"));

	if($w_mcnt == 0){
		list($g_msg, $g_err_lv) = msg("err_Inp_MatMng");
		$g_msg = xpt_err_msg($g_msg, "", __LINE__);
		return 4000;
	}
	
	$w_exe_hold_msg=array();
	
	for($i=1; $i<=$w_mcnt; $i++){
	
		$w_rtn = cs_xck_prt_time($w_prt_cd[$i],
									$w_mt_lot_id[$i],
									$gw_scr['s_shp_cd'],
									$w_thaw_dts,
									$w_life_dts,
									$w_exp_dts);		
		if($w_rtn != 0){
			return 4000;
		}

		$w_exp_rslt = 0;
		$w_life_rslt = 0;
		if($w_exp_dts != ""){
			chk_exp_time($w_exp_dts, $w_exp_rslt);
			if($w_exp_rslt == 1){
				$w_hold_cmt = constant("CMT_EXP");
				#------------------------------------------------------------------
				# MTHD
				#------------------------------------------------------------------
				$w_rtn = main_verb_mthd($gw_scr['s_usr_id'],
											$w_prt_cd[$i],
											$gw_scr['s_shp_cd'],
											$gw_scr['s_equ_cd'],
											$w_mt_lot_id[$i],
											$w_hold_cmt);
				if($w_rtn != 0){
					return 4000;
				}
				
				list($w_msg, $w_err_lv) = msg("warn_Hold_ExpTime");
				$w_srch = array("%MTLOTID%", "%TIME%");
				$w_rplc = array($w_mt_lot_id[$i], $w_exp_dts);
				$w_exe_hold_msg[] = str_replace($w_srch, $w_rplc, $w_msg);
			}
		}
	
		if($w_life_dts != ""){
			chk_life_time($w_life_dts, $w_life_rslt);
			if ($w_exp_rslt == 0 && $w_life_rslt == 1) {
				$w_hold_cmt = constant("CMT_LIFE");
				#------------------------------------------------------------------
				#
				#------------------------------------------------------------------
				$w_rtn = main_verb_mthd($gw_scr['s_usr_id'],
											$w_prt_cd[$i],
											$gw_scr['s_shp_cd'],
											$gw_scr['s_equ_cd'],
											$w_mt_lot_id[$i],
											$w_hold_cmt);
				if($w_rtn != 0){
					return 4000;
				}
				list($w_msg, $w_err_lv) = msg("warn_Hold_LifeTime");
				$w_srch = array("%MTLOTID%", "%TIME%");
				$w_rplc = array($w_mt_lot_id[$i], $w_life_dts);
				$w_exe_hold_msg[] = str_replace($w_srch, $w_rplc, $w_msg);				
			}
		}
			
		if($w_thaw_dts != ""){
			$w_rtn = chk_thaw_time($w_prt_cd[$i],
										$w_mt_lot_id[$i],
										$gw_scr['s_equ_cd'],
										$w_thaw_dts);
			if($w_rtn != 0){
				return 4000;
			}
		}
	}
	if (count($w_exe_hold_msg) > 0) {
		$r_is_hold = 1;
		$g_err_lv = 3;
		$g_msg = xpt_err_msg(implode("<br>", $w_exe_hold_msg), "", "");
	}
	
	return 0;
}
#======================================================================
# 
#======================================================================
function main_exe_usemat($w_lot_bas)
{
	global $gw_scr;
	global $g_msg;
	global $g_err_lv;
	global $g_cpu_dts;
	global $g_low_dts;

	$w_mcnt      = get_session_value('s_mat_cnt', constant("PGM_MTMNG"));
	$w_prt_cd    = get_session_value('s_list_prt_cd', constant("PGM_MTMNG"));
	$w_mt_lot_id = get_session_value('s_list_mt_lot_id', constant("PGM_MTMNG"));

	if($w_mcnt == 0){
		list($g_msg, $g_err_lv) = msg("err_Inp_MatMng");
		$g_msg = xpt_err_msg($g_msg, "", __LINE__);
		return 4000;
	}

	for($i=1; $i<=$w_mcnt; $i++){
		$w_ins = array
		(
			"DEL_FLG"		=> "0",
			"CTG_DVS_CD"	=> constant("CE_USEMAT"),
			"PRD_CD"		=> $w_lot_bas['PRD_CD'],
			"PRC_CD"		=> $w_lot_bas['PRC_CD'],
			"STP_NO"		=> $w_lot_bas['STP_NO'],
			"PRC_CLS_4"		=> $w_lot_bas['PRC_CLS_4'],
			"STP_CD"		=> $w_lot_bas['STP_CD'],
			"CTG_CD"		=> $w_prt_cd[$i],
			"LOT_ID"		=> $w_lot_bas['LOT_ID'],
			"EQU_CD"		=> $w_lot_bas['EQU_CD'],
			"SL_ID"			=> " ",
			"QTY"			=> null,
			"CTG_DAT_TXT"	=> $w_mt_lot_id[$i],
			"CRT_DTS"		=> $g_cpu_dts,
			"USR_ID_CRT"	=> $gw_scr['s_usr_id'],
			"UPD_DTS"		=> $g_low_dts,
			"USR_ID_UPD"	=> " ",
			"UPD_LEV"		=> 1
		);
		$w_rtn = db_insert("CTG_LOG", $w_ins);
		if($w_rtn != 0){
			list($g_msg, $g_err_lv) = msg("err_Ins");
			$g_msg = xpt_err_msg($g_msg, "CTG_LOG", __LINE__);
			return 4000;
		}
	}
	
	return 0;
}
#=========================================================================
#=========================================================================
function chk_exp_time($w_exp_dts, &$r_rslt)
{
	global $g_msg;
	global $g_err_lv;
	global $g_cpu_dts;

	$r_rslt = 0;

	# 使用可能時間を秒に変換
	list($y,$m,$d,$h,$i,$s) = preg_split("/[\-: ]/", $w_exp_dts);
	$w_exp_time = mktime($h,$i,$s,$m,$d,$y);

	# 現在時間を秒に変換
	list($y,$m,$d,$h,$i,$s) = preg_split("/[\-: ]/", $g_cpu_dts);
	$w_cpu_time = mktime($h,$i,$s,$m,$d,$y);


	if($w_exp_time < $w_cpu_time){
		$r_rslt = 1;
	} else {
		$w_remain_time = $w_exp_time - (constant("RMN_H_EXP") * 60 * 60);
		if($w_remain_time < $w_cpu_time){
			$r_rslt = 2;
		}
	}
	return 0;
}
#=========================================================================
# Check Life Time
#=========================================================================
function chk_life_time($w_life_dts, &$r_rslt)
{
	global $g_msg;
	global $g_err_lv;
	global $g_cpu_dts;

	$r_rslt = 0;

	list($y,$m,$d,$h,$i,$s) = preg_split("/[\-: ]/", $w_life_dts);
	$w_life_time = mktime($h,$i,$s,$m,$d,$y);

	list($y,$m,$d,$h,$i,$s) = preg_split("/[\-: ]/", $g_cpu_dts);
	$w_cpu_time = mktime($h,$i,$s,$m,$d,$y);

	if($w_life_time < $w_cpu_time){
		$r_rslt = 1;
	} else {
		$w_remain_time = $w_life_time - (constant("RMN_H_LIFE") * 60 * 60);
		if($w_remain_time < $w_cpu_time){
			$r_rslt = 2;
		}
	}

	return 0;
}
#=========================================================================
# $w_prt_cd
# $w_mt_lot_id
# $w_equ_cd
# $w_thaw_dts
#=========================================================================
function chk_thaw_time($w_prt_cd, $w_mt_lot_id, $w_equ_cd, $w_thaw_dts)
{
	global $g_msg;
	global $g_err_lv;
	global $g_cpu_dts;

	list($y,$m,$d,$h,$i,$s) = preg_split("/[\-: ]/", $w_thaw_dts);
	$w_thaw_time = mktime($h,$i,$s,$m,$d,$y);

	list($y,$m,$d,$h,$i,$s) = preg_split("/[\-: ]/", $g_cpu_dts);
	$w_cpu_time = mktime($h,$i,$s,$m,$d,$y);

	if($w_thaw_time > $w_cpu_time){
		list($g_msg, $g_err_lv) = msg("err_Ovr_ChrgThaw");
		$w_srch = array("%MTLOTID%", "%TIME%");
		$w_rplc = array($w_mt_lot_id, $w_thaw_dts);
		$g_msg = xpt_err_msg(str_replace($w_srch, $w_rplc, $g_msg), "", __LINE__);
		return 4000;
	}

	return 0;
}
#==================================================================
# IOIN VERB
#==================================================================
function main_ioin_verb($w_usr_id, $w_equ_cd, $w_cmt, &$w_lot_bas)
{
	global $gw_scr;
	global $g_msg;
	global $g_err_lv;

	#------------------------------------------------------------------
	# IOIN ST CHECK
	#------------------------------------------------------------------
	$w_rtn = ioin_st_check($w_lot_bas);
	if($w_rtn != 0){
		$g_err_lv = 0;
		$g_msg = xpt_err_msg($g_msg, "", __LINE__);
		return 4000;
	}
	if($w_equ_cd == ""){
		#------------------------------------------------------------------
		# Check EQU Use
		#------------------------------------------------------------------
		$w_rtn = xgt_use_equ($w_lot_bas, $w_equ_cd);
		if($w_rtn != 0){
			$g_err_lv = 0;
			$g_msg = xpt_err_msg($g_msg, "", __LINE__);
			return 4000;
		}
	}

	#------------------------------------------------------------------
	# EQU Check
	#------------------------------------------------------------------
	$w_rtn = ioin_equ_check($w_equ_cd, $w_lot_bas);
	if($w_rtn != 0){
		$g_err_lv = 0;
		$g_msg = xpt_err_msg($g_msg, "", __LINE__);
		return 4000;
	}

	#------------------------------------------------------------------
	#
	#------------------------------------------------------------------
	$w_rtn = ioin($w_lot_bas['LOT_ID'],
				  $w_usr_id,
				  $w_lot_bas['UPD_LEV'],
				  $w_equ_cd,
				  $w_cmt,
				  $w_lot_bas);
	if($w_rtn != 0){
		$g_err_lv = 0;
		$g_msg = xpt_err_msg($g_msg, "", __LINE__);
		return 4000;
	}

	return 0;
}

#==================================================================
# MAIN VERB IOOT
#==================================================================
function main_verb_ioot($w_usr_id, $w_ctg_dvs_cd, $w_ctg_cd,
						$w_ctg_qty, $w_ctg_dat_txt, $w_ctg_slid, $w_sl_qty_ok,
						$w_chp_qty_ok, $w_lf_qty_ok, $w_cmt, &$w_lot_bas)
{
	global $g_msg;
	global $g_err_lv;

	#------------------------------------------------------------------
	# IOOT ST Check
	#------------------------------------------------------------------
	$w_rtn = ioot_st_check($w_lot_bas['LOT_ST_DVS']);
	if($w_rtn != 0){
		$g_err_lv = 0;
		$g_msg = xpt_err_msg($g_msg, "", __LINE__);
		return 4000;
	}

	#------------------------------------------------------------------
	#
	#------------------------------------------------------------------
	$w_rtn = xck_lio(
					$w_lot_bas['PRC_CD'],
					$w_lot_bas['IO_BLC_CD'],
					$w_lot_bas['PLT_DVS_CD'],
					$w_lot_st_dvs,				
					$w_io_blc_cd,				
					$w_stp_cd,					
					$w_stp_no);				

	if($w_rtn != 0){
		$g_err_lv = 0;
		$g_msg = xpt_err_msg($g_msg, '', __LINE__);
		return 4000;
	}

	#------------------------------------------------------------------
	# 
	#------------------------------------------------------------------
	$w_ctg_flg = 0;
	if(is_array($w_ctg_cd)){
		for($i=1; $i<=count($w_ctg_cd); $i++){
			$w_arr_cnt = $i;
			$w_arr_ctg_dvs_cd[$i] = $w_ctg_dvs_cd[$i];
			$w_arr_ctg_cd[$i]     = $w_ctg_cd[$i];
			$w_arr_txt[$i]        = $w_ctg_dat_txt[$i];
			$w_arr_equ_cd[$i]     = $w_lot_bas['EQU_CD'];
			$w_arr_sl_id[$i]      = $w_ctg_slid[$i];
			$w_arr_qty[$i]        = $w_ctg_qty[$i];
		}
		$w_ctg_flg = 1;
	}

	if($w_ctg_flg == 0){
		$w_arr_cnt = 0;
		$w_arr_ctg_dvs_cd = '';
		$w_arr_ctg_cd     = '';
		$w_arr_equ_cd     = '';
		$w_arr_sl_id      = '';
		$w_arr_qty        = '';
		$w_arr_txt        = '';
	}

	#------------------------------------------------------------------
	#
	#------------------------------------------------------------------
	$w_rtn = ioot(
				$w_lot_bas['LOT_ID'],			
				$w_usr_id,						
				$w_lot_bas['UPD_LEV'],			
				$w_cmt,						
				$w_lot_st_dvs,					
				$w_sl_qty_ok,					
				$w_chp_qty_ok,					
				$w_lf_qty_ok,					
				$w_lot_bas['SECRET_NO'],		
				$w_arr_cnt,					
				$w_arr_ctg_dvs_cd,				
				$w_arr_ctg_cd,					
				$w_arr_equ_cd,					
				$w_arr_sl_id,					
				$w_arr_qty,						
				$w_arr_txt,					
				$w_lot_bas);					

	if($w_rtn != 0){
		$g_err_lv = 0;
		$g_msg = xpt_err_msg($g_msg, '', __LINE__);
		return 4000;
	}

	return 0;
}

#==================================================================
#
#==================================================================
function main_verb_iomv($w_usr_id, $w_cmt, &$w_lot_bas)
{
	global $g_msg;
	global $g_err_lv;

	switch($w_lot_bas['LOT_ST_DVS']){
	case "OW":
		#------------------------------------------------------------------
		#  xgt_nio
		#------------------------------------------------------------------
		$w_rtn = xgt_nio(
						$w_lot_bas['PRC_CD'],
						$w_lot_bas['IO_BLC_CD'],
						$w_lot_bas['STP_NO'],
						$w_lot_bas['PLT_DVS_CD'],
						$w_io_blc_cd,			
						$w_stp_cd,					
						$w_stp_no);					


		$w_nxt_verb = "IOMV";

		break;
	case "EW":
		#------------------------------------------------------------------
		#
		#------------------------------------------------------------------
		$w_rtn = xgt_npr(
						$w_lot_bas['RT_CD'],
						$w_lot_bas['PRC_CD'],
						$w_lot_bas['PLT_DVS_CD'],
						$w_prc_cd,					
						$w_io_blc_cd,				
						$w_stp_cd,					
						$w_stp_no);					

		if($w_rtn == 0){
			$w_nxt_verb = "PRPT";
		} else {
			$g_err_lv = 0;
			$g_msg = xpt_err_msg($g_msg, '', __LINE__);
			return 4000;
		}

		break;
	}


	switch($w_nxt_verb){
	case "IOMV":
		#------------------------------------------------------------------
		#
		#------------------------------------------------------------------
		$w_rtn = iomv(
					$w_lot_bas['LOT_ID'],
					$w_usr_id,
					$w_lot_bas['UPD_LEV'],
					$w_cmt,
					$w_io_blc_cd,
					$w_stp_cd,
					$w_stp_no,
					$w_lot_bas);

		if($w_rtn != 0){
			$g_err_lv = 0;
			$g_msg = xpt_err_msg($g_msg, '', __LINE__);
			return $w_rtn;
		}

		break;
	case "PRPT":
		#------------------------------------------------------------------
		#
		#------------------------------------------------------------------
		$w_rtn = prpt(
					$w_lot_bas['LOT_ID'],
					$w_usr_id,
					$w_lot_bas['UPD_LEV'],
					$w_cmt,
					$w_lot_bas);

		if($w_rtn != 0){
			$g_err_lv = 0;
			$g_msg = xpt_err_msg($g_msg, '', __LINE__);
			return $w_rtn;
		}

		#------------------------------------------------------------------
		#
		#------------------------------------------------------------------
		$w_rtn = prpc(
					$w_lot_bas['LOT_ID'],
					$w_usr_id,
					$w_lot_bas['UPD_LEV'],
					$w_cmt,
					$w_prc_cd,
					$w_io_blc_cd,
					$w_stp_cd,
					$w_stp_no,
					$w_lot_bas);

		if($w_rtn != 0){
			$g_err_lv = 0;
			$g_msg = xpt_err_msg($g_msg, '', __LINE__);
			return $w_rtn;
		}

		#------------------------------------------------------------------
		#
		#------------------------------------------------------------------
		$w_rtn = prgt(
					$w_lot_bas['LOT_ID'],
					$w_usr_id,
					$w_lot_bas['UPD_LEV'],
					$w_cmt,
					$w_lot_bas);

		if($w_rtn != 0){
			$g_err_lv = 0;
			$g_msg = xpt_err_msg($g_msg, '', __LINE__);
			return $w_rtn;
		}

		break;

	} # end switch

	return 0;
}

#==================================================================
# IOHD
#==================================================================
function main_verb_iohd($w_usr_id, $w_hld_can_dts, $w_cus_cd, $w_cmt, &$w_lot_bas)
{
	global $g_msg;
	global $g_err_lv;

	#------------------------------------------------------
	# IOHD Check
	#------------------------------------------------------
	$w_rtn = iohd_st_check($w_lot_bas['LOT_ST_DVS']);
	if ($w_rtn) {
		$g_err_lv = 0;
		$g_msg = xpt_err_msg($g_msg, "", __LINE__);
		return 4000;
	}

	#------------------------------------------------------
	# IOHD
	#------------------------------------------------------
	$w_rtn = iohd(
				$w_lot_bas['LOT_ID'],
				$w_usr_id,
				$w_lot_bas['UPD_LEV'],
				$w_hld_can_dts,
				$w_cus_cd,
				$w_cmt,
				$w_lot_bas);

	if($w_rtn != 0){
		$g_err_lv = 0;
		$g_msg = xpt_err_msg($g_msg, "", __LINE__);
		return 4000;
	}

	return 0;
}
#=========================================================================
# MTHD
#=========================================================================
function main_verb_mthd($w_usr_id, $w_prt_cd, $w_shp_cd, $w_equ_cd, $w_mt_lot_id, $w_cmt)
{
	global $g_msg;
	global $g_err_lv;

	$w_rtn = xgt_prt_wip($w_prt_cd,
						$w_shp_cd,
						"",
						$w_mt_lot_id,
						$w_prt_wip);
	if($w_rtn != 0){
		$g_err_lv = 0;
		$g_msg = xpt_err_msg($g_msg, "", __LINE__);
		return 4000;
	}

	$w_rtn = mthd_st_check(trim($w_prt_wip['PRT_ST_DVS']));
	if($w_rtn != 0){
		$g_err_lv = 0;
		$g_msg = xpt_err_msg($g_msg, $w_mt_lot_id, __LINE__);
		return 4000;
	}

	$w_rtn = mthd($w_usr_id,
				$w_prt_wip['UPD_LEV'],
				" ",
				$w_cmt,
				$w_prt_wip);
	if($w_rtn != 0){
		$g_err_lv = 0;
		$g_msg = xpt_err_msg($g_msg, $w_mt_lot_id, __LINE__);
		return 4000;
	}

	return 0;
}
#==================================================================
# Set Next Verb
#==================================================================
function set_nxt_verb($w_lot_bas, &$r_nxt_verb, &$r_nxt_ionm)
{
	global $g_msg;
	global $g_err_lv;

	#------------------------------------------------------------------
	#
	#------------------------------------------------------------------
	switch($w_lot_bas['LOT_ST_DVS']){
	case "OW":
		#------------------------------------------------------------------
		#
		#------------------------------------------------------------------
		$w_rtn = xgt_nio($w_lot_bas['PRC_CD'],
						$w_lot_bas['IO_BLC_CD'],
						$w_lot_bas['STP_NO'],
						$w_lot_bas['PLT_DVS_CD'],
						$w_nxt_io_blc_cd,
						$w_nxt_stp_cd,
						$w_nxt_stp_no);
		if($w_rtn != 0){
			$g_err_lv = 0;
			$g_msg = xpt_err_msg($g_msg, "", __LINE__);
			return 4000;
		}
		#------------------------------------------------------------------
		#
		#------------------------------------------------------------------
		$w_rtn = xgn_cd($w_nxt_io_blc_cd, 1, $w_nxt_io_blc_nm);
		if($w_rtn != 0){
			$g_err_lv = 0;
			$g_msg = xpt_err_msg($g_msg, "", __LINE__);
			return 4000;
		}
		$r_nxt_verb = 'IOMV';
		$r_nxt_ionm = trim($w_nxt_io_blc_nm);

		break;
	case "EW":
		#------------------------------------------------------------------
		#
		#------------------------------------------------------------------
		$w_rtn = xgt_npr($w_lot_bas['RT_CD'],
						$w_lot_bas['PRC_CD'],
						$w_lot_bas['PLT_DVS_CD'],
						$w_nxt_prc_cd,
						$w_nxt_io_blc_cd,
						$w_nxt_stp_cd,
						$w_nxt_stp_no);
		if($w_rtn != 0){
			$g_err_lv = 0;
			$g_msg = xpt_err_msg($g_msg, "", __LINE__);
			return 4000;
		}
		#------------------------------------------------------------------
		# 
		#------------------------------------------------------------------
		$w_rtn = xgn_cd($w_nxt_io_blc_cd, 1, $w_nxt_io_blc_nm);
		if($w_rtn != 0){
			$g_err_lv = 0;
			$g_msg = xpt_err_msg($g_msg, "", __LINE__);
			return 4000;
		}
		$r_nxt_verb = 'PRPT';
		$r_nxt_ionm = trim($w_nxt_io_blc_nm);

		break;
	}

	return 0;
}

#==================================================================
# Insert CTG_TBL
#==================================================================
function ins_ctg_tbl($w_usr_id,
					 $w_lot_id,
					 $w_ctg_dvs_cd,
					 $w_ctg_cd,
					 $w_sl_id,
					 $w_ctg_dat_txt,
					 $w_ctg_dat_val)
{
	global $gw_scr;
	global $g_msg;
	global $g_err_lv;
	global $g_cpu_dts;
	global $g_low_dts;

	$w_arr = array
	(
		"DEL_FLG"		=> "0",
		"LOT_ID"		=> $w_lot_id,
		"CTG_DVS_CD"	=> $w_ctg_dvs_cd,
		"CTG_CD"		=> $w_ctg_cd,
		"SL_ID"			=> $w_sl_id,
		"CTG_DAT_TXT"	=> $w_ctg_dat_txt,
		"CTG_DAT_VAL"	=> $w_ctg_dat_val,
		"CRT_DTS"		=> $g_cpu_dts,
		"USR_ID_CRT"	=> $w_usr_id,
		"UPD_DTS"		=> $g_low_dts,
		"USR_ID_UPD"	=> " ",
		"UPD_LEV"		=> 1
	);

	$w_rtn = db_insert("CTG_TBL", $w_arr);
	if($w_rtn != 0){
		list($g_msg, $g_err_lv) = msg("err_Ins");
		$g_msg = xpt_err_msg($g_msg, "CTG_TBL", __LINE__);
		return 4000;
	}

	return 0;
}
#==================================================================
#
#==================================================================
function get_rcporgmstinf($w_stp_cd, $w_prd_cd, &$r_dat)
{
	global $g_msg;
	global $g_err_lv;
	global $g_cpu_dts;
	
	$r_dat = array();

	$w_pm_tester = constant("PM_TESTER");
	$w_pm_fixture = constant("PM_FIXTURE");
		
	$w_sql = <<<_SQL
		SELECT NM.NM_SHT RCP_NM, ROM.RCP_CD , ROM.M_RCP_FLG,RM1.PRM_DAT_TXT TESTER,RM2.PRM_DAT_TXT FIXTURE
		FROM RCP_ORG_MST ROM , RCP_MST RM1 , RCP_MST RM2 , NM_MST NM
		WHERE ROM.STP_CD = '{$w_stp_cd}'
		AND ROM.PKG_CD = ' '
		AND ROM.PRD_CD = '{$w_prd_cd}'
		AND (ROM.STR_DTS < '{$g_cpu_dts}' OR ROM.STR_DTS IS NULL)
		AND (ROM.END_DTS > '{$g_cpu_dts}' OR ROM.END_DTS IS NULL)
		AND ROM.DEL_FLG = '0'
		AND RM1.RCP_CD = ROM.RCP_CD
		AND RM1.DEL_FLG = '0'
		AND RM1.PRM_CD = '{$w_pm_tester}'
		AND RM2.RCP_CD = ROM.RCP_CD
		AND RM2.DEL_FLG = '0'
		AND RM2.PRM_CD = '{$w_pm_fixture}'
		AND NM.CD = ROM.RCP_CD
		AND NM.DEL_FLG = '0'
		ORDER BY ROM.RCP_CD
_SQL;
	$w_stmt = db_res_set($w_sql);
	$w_rtn = db_do($w_stmt);
	if($w_rtn != 0){
		list($g_msg, $g_err_lv) = msg("err_Sel");
		$g_msg = xpt_err_msg($g_msg, "RCP_ORG_MST", __LINE__);
		return 4000;
	}
	
	$w_cnt = 0;
	while($w_row = db_fetch_row($w_stmt)){
		
		$r_dat[$w_cnt] = $w_row;
		$w_cnt++;
	}
	
	
	db_res_free($w_stmt);

	return 0;
}

#==================================================================
#
#==================================================================
function get_board_pin_and_lens_pin($w_fixture, &$r_dat)
{
        global $g_msg;
        global $g_err_lv;
        global $g_cpu_dts;

	$r_dat = array();
	$w_fixture = trim($w_fixture);

        $w_sql = <<<_SQL
SELECT
	* 
FROM  
	PIN_TBL
WHERE
	DEL_FLG = '0' AND
	FIXTURE = '{$w_fixture}' 
_SQL;
        $w_stmt = db_res_set($w_sql);
        $w_rtn = db_do($w_stmt);
        if($w_rtn != 0){
                list($g_msg, $g_err_lv) = msg("err_Sel");
                $g_msg = xpt_err_msg($g_msg, "RCP_ORG_MST", __LINE__);
                return 4000;
        }

        $w_cnt = 0;
        while($w_row = db_fetch_row($w_stmt)){

                $r_dat[$w_cnt]['BOARD_PIN'] = trim($w_row['BOARD_PIN']);
		$r_dat[$w_cnt]['LENS_PIN'] = trim($w_row['LENS_PIN']);
                $w_cnt++;
        }


        db_res_free($w_stmt);

        return 0;
}


#==================================================================
#
#==================================================================
function get_prcmstinf($w_prc_cd, &$r_dat)
{
	global $g_msg;
	global $g_err_lv;

	$r_dat = array();

	$w_sql = <<<_SQL
SELECT
	*
FROM
	PRC_MST
WHERE
	PRC_CD = '{$w_prc_cd}'
	AND DEL_FLG = '0'
_SQL;

	$w_stmt = db_res_set($w_sql);
	$w_rtn = db_do($w_stmt);
	if($w_rtn != 0){
		list($g_msg, $g_err_lv) = msg("err_Sel");
		$g_msg = xpt_err_msg($g_msg, "PRC_MST", __LINE__);
		return 4000;
	}

	if($w_row = db_fetch_row($w_stmt)){
		foreach($w_row as $key => $val){
			$w_row[$key] = trim($w_row[$key]);
		}
		$r_dat = $w_row;
	}
	db_res_free($w_stmt);

	return 0;
}
#==================================================================
#
#==================================================================
function get_prcflwinf($w_prc_cd, $w_stp_no, &$r_dat)
{
	global $g_msg;
	global $g_err_lv;

	$r_dat = array();

	$w_sql = <<<_SQL
SELECT
	*
FROM
	PRC_FLW_MST
WHERE
	PRC_CD = '{$w_prc_cd}'
	AND STP_NO = '{$w_stp_no}'
	AND DEL_FLG = '0'
_SQL;

	$w_stmt = db_res_set($w_sql);
	$w_rtn = db_do($w_stmt);
	if($w_rtn != 0){
		list($g_msg, $g_err_lv) = msg("err_Sel");
		$g_msg = xpt_err_msg($g_msg, "PRC_FLW_MST", __LINE__);
		return 4000;
	}

	if($w_row = db_fetch_row($w_stmt)){
		foreach($w_row as $key => $val){
			$w_row[$key] = trim($w_row[$key]);
		}
		$r_dat = $w_row;
	}
	db_res_free($w_stmt);

	return 0;
}
#==================================================================
#
#==================================================================
function get_pre_prdorginf($w_rt_cd, $w_prc_cd, $w_stp_no, &$r_dat)
{
	global $g_msg;
	global $g_err_lv;

	$r_dat = array();

	$w_sql = <<<_SQL
SELECT
	*
FROM
	PRD_ORG_MST
WHERE
	RT_CD = '{$w_rt_cd}'
	AND DEL_FLG = '0'
	AND IO_FLG = '1'
	AND SEQ_NO_RT < ( 
			SELECT SEQ_NO_RT 
			FROM PRD_ORG_MST 
			WHERE RT_CD = '{$w_rt_cd}'
			AND PRC_CD = '{$w_prc_cd}'
			AND STP_NO = '{$w_stp_no}'
			AND DEL_FLG = '0')
ORDER BY SEQ_NO_RT DESC
_SQL;

	$w_stmt = db_res_set($w_sql);
	$w_rtn = db_do($w_stmt);
	if($w_rtn != 0){
		list($g_msg, $g_err_lv) = msg("err_Sel");
		$g_msg = xpt_err_msg($g_msg, "PRD_ORG_MST", __LINE__);
		return 4000;
	}

	if($w_row = db_fetch_row($w_stmt)){
		foreach($w_row as $key => $val){
			$w_row[$key] = trim($w_row[$key]);
		}
		$r_dat = $w_row;
	}
	db_res_free($w_stmt);

	return 0;
}
#==================================================================
# check baking
#==================================================================
function chk_time_for_baking($w_lot_bas, $w_stpcls2){
	
	global $g_msg;
	global $g_err_lv;
	global $g_cpu_dts;
	$w_bake_time = "";
	$w_bake_count = "";
	### Get Baking Time / Baking Count
	$w_ctg_cd = constant("CT_BAKING_TIME_2");
	$w_rtn = cs_xck_baking__GetBakeTime($w_lot_bas['LOT_ID'],
										constant("CE_LTINF"),
										$w_ctg_cd,
										$w_bake_time,
										$w_bake_count,
										"LOT_INF_TBL");
	if($w_rtn != 0){
		$g_err_lv = 0;
		$g_msg = xpt_err_msg($g_msg, "", __LINE__);
		return 4000;
	}
	if($w_bake_time == ""){
		### Get Baking Time / Baking Count
		$w_ctg_cd = constant("CT_BAKING_TIME_1");
		$w_rtn = cs_xck_baking__GetBakeTime($w_lot_bas['LOT_ID'],
											constant("CE_LTINF"),
											$w_ctg_cd,
											$w_bake_time,
											$w_bake_count,
											"LOT_INF_TBL");
		if($w_rtn != 0){
			$g_err_lv = 0;
			$g_msg = xpt_err_msg($g_msg, "", __LINE__);
			return 4000;
		}
		
	}	
	
	/** If there is no baking time, just skip the checking **/
	if($w_bake_time != "" ){
	
		### Check Baking
		$w_rtn = cs_xck_baking($w_lot_bas['STP_CD'],
							$w_lot_bas['PRD_CD'],
							constant("CE_LTINF"),
							$w_ctg_cd,
							$w_bake_time,
							$w_bake_count);
		if($w_rtn != 0){
			$g_err_lv = 0;
			$g_msg = xpt_err_msg($g_msg, "", __LINE__);
			return 4000;
		}
	}
	return 0;
}

#==================================================================
#
#==================================================================
function get_lotinf($w_lot_id, $w_ctgdvs, $w_ctgcd, &$r_dat)
{
	global $g_msg;
	global $g_err_lv;

	$r_dat = array();

	$w_sql = <<<_SQL
SELECT
	*
FROM
	LOT_INF_TBL
WHERE
	LOT_ID = '{$w_lot_id}'
	AND CTG_DVS_CD = '{$w_ctgdvs}'
	AND CTG_CD = '{$w_ctgcd}'
	AND DEL_FLG = '0'
_SQL;

	$w_stmt = db_res_set($w_sql);
	$w_rtn = db_do($w_stmt);
	if($w_rtn != 0){
		list($g_msg, $g_err_lv) = msg("err_Sel");
		$g_msg = xpt_err_msg($g_msg, "LOT_INF_TBL", __LINE__);
		return 4000;
	}

	if($w_row = db_fetch_row($w_stmt)){
		foreach($w_row as $key => $val){
			$w_row[$key] = trim($w_row[$key]);
		}
		$r_dat = $w_row;
	}
	db_res_free($w_stmt);

	return 0;
}
#==================================================================
#
#==================================================================
function ins_lot_inf_tbl($w_usr_id,
						 $w_lot_id,
						 $w_ctg_dvs_cd,
						 $w_ctg_cd,
						 $w_sl_id,
						 $w_ctg_dat_txt,
						 $w_ctg_dat_val,
						 $w_crt_verb)
{
	global $gw_scr;
	global $g_msg;
	global $g_err_lv;
	global $g_cpu_dts;
	global $g_low_dts;

	$w_arr = array
	(
		"DEL_FLG"		=> "0",
		"LOT_ID"		=> $w_lot_id,
		"CTG_DVS_CD"	=> $w_ctg_dvs_cd,
		"CTG_CD"		=> $w_ctg_cd,
		"SL_ID"			=> $w_sl_id,
		"CTG_DAT_TXT"	=> $w_ctg_dat_txt,
		"CTG_DAT_VAL"	=> $w_ctg_dat_val,
		"CRT_VERB"		=> $w_crt_verb,
		"CRT_DTS"		=> $g_cpu_dts,
		"USR_ID_CRT"	=> $w_usr_id,
		"UPD_VERB"		=> " ",
		"UPD_DTS"		=> $g_low_dts,
		"USR_ID_UPD"	=> " ",
		"UPD_LEV"		=> 1
	);

	$w_rtn = db_insert("LOT_INF_TBL", $w_arr);
	if($w_rtn != 0){
		list($g_msg, $g_err_lv) = msg("err_Ins");
		$g_msg = xpt_err_msg($g_msg, "LOT_INF_TBL", __LINE__);
		return 4000;
	}

	return 0;
}
#==================================================================
# Has User Group
#==================================================================
function has_usrgrp($w_usr_id, $w_usr_grp_cd, &$r_result)
{
	global $g_msg;
	global $g_err_lv;

	$r_result = 0;

	$w_sql = <<<_SQL
SELECT COUNT(*) as CNT FROM USR_GRP_MST
WHERE
DEL_FLG='0'
AND USR_ID='{$w_usr_id}'
AND USR_GRP_CD='{$w_usr_grp_cd}'
_SQL;

	$w_stmt = db_res_set($w_sql);
	$w_rtn = db_do($w_stmt);
	if($w_rtn != 0){
		list($g_msg, $g_err_lv) = msg("err_Sel");
		$g_msg = xpt_err_msg($g_msg, "USR_GRP_MST", __LINE__);
		return 4000;
	}

	if ($w_row = db_fetch_row($w_stmt)) {
		$r_result = ($w_row['CNT'] == 0) ? 0 : 1;
	}
	db_res_free($w_stmt);

	return 0;
}

#==================================================================
# Checking Backfill Header Only
#==================================================================
function chk_backfill($w_usr_id,
                                $w_lot_id,
                                $w_simm,
                                $w_equ_cd,
                                $w_chp_qty,
                                $w_sub_qty,
                                $w_prg_id,
                                &$r_web_err_cd, &$r_web_err_nm, &$r_web_err_msg)
{
        global $gw_scr;
        global $g_msg;
        global $g_err_lv;
        global $g_cpu_dts;

        # $w_web_req
        # This is for the web request type. It will indicate Track In or Track Out for the Web Service.
        # 0 : TRACK IN
        # 1 : TRACK OUT
        $w_web_req = 0;

        #------------------------------------------------------------------
        # Backfill Checking For Header Only Web Service
        #------------------------------------------------------------------
        $w_rtn = cs_xck_backfill_web_service($w_lot_id,
                                                                $w_simm,
                                                                $w_equ_cd,
                                                                $w_prg_id,
                                                                $w_usr_id,
                                                                $g_cpu_dts,
                                                                $w_chp_qty,
                                                                $w_sub_qty,
                                                                $w_web_req,
                                                                $r_web_err_cd,
                                                                $r_web_err_nm,
                                                                $r_web_err_msg);
        if($w_rtn != 0){
                $g_err_lv = 0;
                $g_msg = xpt_err_msg($g_msg, "", __LINE__);
                return 4000;
        }

        return 0;
}

#==================================================================
# Checking Backfill
#==================================================================
function chk_backfill_in($w_usr_id,
                                $w_lot_id,
                                $w_simm,
                                $w_prd_cd,
                                $w_stp_cd,
                                $w_equ_cd,
                                $w_chp_qty,
                                $w_sub_qty,
                                $w_prg_id,
                                &$r_web_err_cd, &$r_web_err_nm, &$r_web_err_msg)
{
        global $gw_scr;
        global $g_msg;
        global $g_err_lv;
        global $g_cpu_dts;

        #------------------------------------------------------------------
        #
        #------------------------------------------------------------------
        $w_mcnt            = get_session_value('s_mat_cnt', constant("PGM_MTMNG"));
        $w_list_prt_cd     = get_session_value('s_list_prt_cd', constant("PGM_MTMNG"));
        $w_list_prt_grp_cd = get_session_value('s_list_prt_grp_cd', constant("PGM_MTMNG"));
        $w_list_prt_alt    = get_session_value('s_list_glb_prt_cd', constant("PGM_MTMNG"));
        $w_list_mt_lot_id  = get_session_value('s_list_mt_lot_id', constant("PGM_MTMNG"));
        $w_list_unt_cd     = get_session_value('s_list_unt_cd', constant("PGM_MTMNG"));

        $w_mat_inp_flg = 0;
        for($i=1; $i<=$w_mcnt; $i++){
                if($w_list_mt_lot_id[$i] != ""){
                        $w_mat_inp_flg = 1;
                        break;
                }
        }
        if($gw_scr['s_prt_ctrl'] == "1"
        && ($w_mcnt == "" || $w_mat_inp_flg == 0)
        ){
                list($g_msg, $g_err_lv) = msg("err_Inp_MatMng");
                $g_msg = xpt_err_msg($g_msg, "", __LINE__);
                return 4000;
        }
        #------------------------------------------------------------------
        # PRT_QTY 
        #------------------------------------------------------------------
        $w_tmpsql = <<<_SQL
SELECT
    '1' AS DVS,
    POM.PRT_QTY,
    INV.PRT_QTY AS PRT_RAT
FROM
    PRT_ORG_MST POM,
    PRT_INV_MST INV
WHERE
    POM.PRD_CD = '{$w_prd_cd}'
    AND POM.STP_CD = '{$w_stp_cd}'
    AND POM.PRT_EXEC_DVS = 'STEQ'
    AND POM.EQU_CD = '{$w_equ_cd}'
    AND POM.PRT_GRP_CD = '%1\$s'
    AND POM.PRT_CD = '%2\$s'
    AND POM.TRC_EXC_FLG = '0'
    AND POM.DEL_FLG = '0'
    AND INV.PRD_CD = POM.PRD_CD
    AND INV.STP_CD = POM.STP_CD
    AND INV.PRT_EXEC_DVS = POM.PRT_EXEC_DVS
    AND INV.EQU_CD = POM.EQU_CD
    AND INV.PRT_GRP_CD = POM.PRT_GRP_CD
    AND INV.PRT_DVS = 'RT'
    AND INV.PRT_CD = POM.PRT_CD
    AND INV.DEL_FLG = '0'

UNION ALL

SELECT
    '2' AS DVS,
    POM.PRT_QTY,
    INV.PRT_QTY AS PRT_RAT
FROM
    PRT_ORG_MST POM,
    PRT_INV_MST INV
WHERE
    POM.PRD_CD = '{$w_prd_cd}'
    AND POM.STP_CD = '{$w_stp_cd}'
    AND POM.PRT_EXEC_DVS = 'ST'
    AND POM.EQU_CD = ' '
    AND POM.PRT_GRP_CD = '%1\$s'
    AND POM.PRT_CD = '%2\$s'
    AND POM.TRC_EXC_FLG = '0'
    AND POM.DEL_FLG = '0'
    AND INV.PRD_CD = POM.PRD_CD
    AND INV.STP_CD = POM.STP_CD
    AND INV.PRT_EXEC_DVS = POM.PRT_EXEC_DVS
    AND INV.EQU_CD = POM.EQU_CD
    AND INV.PRT_GRP_CD = POM.PRT_GRP_CD
    AND INV.PRT_DVS = 'RT'
    AND INV.PRT_CD = POM.PRT_CD
    AND INV.DEL_FLG = '0'

UNION ALL

SELECT
        '3' AS DVS,
        POM.PRT_QTY,
        BAS.PRT_RAT
FROM
        PRT_ORG_MST POM,
        PRT_BAS_MST BAS
WHERE
        POM.PRD_CD = '{$w_prd_cd}'
        AND POM.STP_CD = '{$w_stp_cd}'
        AND POM.PRT_EXEC_DVS = 'STEQ'
        AND POM.EQU_CD = '{$w_equ_cd}'
        AND POM.PRT_GRP_CD = '%1\$s'
        AND POM.PRT_CD = '%2\$s'
        AND POM.TRC_EXC_FLG = '0'
        AND POM.DEL_FLG = '0'
        AND BAS.PRT_CD = POM.PRT_CD
        AND BAS.DEL_FLG = '0'

UNION ALL

SELECT
        '4' AS DVS,
        POM.PRT_QTY,
        BAS.PRT_RAT
FROM
        PRT_ORG_MST POM,
        PRT_BAS_MST BAS
WHERE
        POM.PRD_CD = '{$w_prd_cd}'
        AND POM.STP_CD = '{$w_stp_cd}'
        AND POM.PRT_EXEC_DVS = 'ST'
        AND POM.EQU_CD = ' '
        AND POM.PRT_GRP_CD = '%1\$s'
        AND POM.PRT_CD = '%2\$s'
        AND POM.TRC_EXC_FLG = '0'
        AND POM.DEL_FLG = '0'
        AND BAS.PRT_CD = POM.PRT_CD
        AND BAS.DEL_FLG = '0'

ORDER BY
        DVS
_SQL;
        $w_arr_mat = array();
        for($i=1; $i<=$w_mcnt; $i++){
                #------------------------------------------------------------------
                # 
                #------------------------------------------------------------------
                $w_sql = sprintf($w_tmpsql, $w_list_prt_grp_cd[$i], $w_list_prt_cd[$i]);
                $w_stmt = db_res_set($w_sql);
                $w_rtn = db_do($w_stmt);
                if($w_rtn != 0){
                        list($g_msg, $g_err_lv) = msg("err_Sel");
                        $g_msg = xpt_err_msg($g_msg, "", __LINE__);
                        return 4000;
                }
	
                $w_row = db_fetch_row($w_stmt);
                db_res_free($w_stmt);

                $w_prt_qty = $w_row['PRT_QTY'];
                $w_prt_rat = $w_row['PRT_RAT'];

                $w_use_qty = $w_chp_qty * ($w_prt_qty / 1000) / ($w_prt_rat / 100);
                $w_use_qty = ceil_7($w_use_qty);
                $w_tmp = array
                (
                        $w_list_prt_alt[$i]     => $w_list_mt_lot_id[$i] . "_" . $w_use_qty
                );

                $w_arr_mat = $w_arr_mat + $w_tmp;
        }

        #------------------------------------------------------------------
        # Backfill(iMES)
        #------------------------------------------------------------------
        $w_rtn = cs_xck_backfill_trk_snd_lot($w_lot_id,
                                                                $w_simm,
                                                                $w_equ_cd,
                                                                $w_prg_id,
                                                                $w_usr_id,
                                                                $g_cpu_dts,
                                                                $w_chp_qty,
                                                                $w_sub_qty,
                                                                $w_arr_mat,
                                                                $r_web_err_cd,
                                                                $r_web_err_nm,
                                                                $r_web_err_msg);
        if($w_rtn != 0){
                $g_err_lv = 0;
                $g_msg = xpt_err_msg($g_msg, "", __LINE__);
                return 4000;
        }

        return 0;
}


#==================================================================
# SPACE Check
#==================================================================
function chk_space($w_usr_id,
				$w_lot_id,
				$w_simm,
				$w_prd_cd,
				$w_stp_cd,
				$w_equ_cd,
				$w_chp_qty,
				$w_sub_qty,
				$w_prg_id,
				&$r_spc_err_cd, &$r_spc_err_nm, &$r_spc_err_msg)
{
	global $gw_scr;
	global $g_msg;
	global $g_err_lv;
	global $g_cpu_dts;

	#------------------------------------------------------------------
	#
	#------------------------------------------------------------------
	$w_mcnt            = get_session_value('s_mat_cnt', constant("PGM_MTMNG"));
	$w_list_prt_cd     = get_session_value('s_list_prt_cd', constant("PGM_MTMNG"));
	$w_list_prt_grp_cd = get_session_value('s_list_prt_grp_cd', constant("PGM_MTMNG"));
	$w_list_prt_alt    = get_session_value('s_list_glb_prt_cd', constant("PGM_MTMNG"));
	$w_list_mt_lot_id  = get_session_value('s_list_mt_lot_id', constant("PGM_MTMNG"));
	$w_list_unt_cd     = get_session_value('s_list_unt_cd', constant("PGM_MTMNG"));

	$w_mat_inp_flg = 0;
	for($i=1; $i<=$w_mcnt; $i++){
		if($w_list_mt_lot_id[$i] != ""){
			$w_mat_inp_flg = 1;
			break;
		}
	}
	if($gw_scr['s_prt_ctrl'] == "1"
	&& ($w_mcnt == "" || $w_mat_inp_flg == 0)
	){
		list($g_msg, $g_err_lv) = msg("err_Inp_MatMng");
		$g_msg = xpt_err_msg($g_msg, "", __LINE__);
		return 4000;
	}

	#------------------------------------------------------------------
	# PRT_QTY
	#------------------------------------------------------------------
	$w_tmpsql = <<<_SQL
SELECT
    '1' AS DVS,
    POM.PRT_QTY,
    INV.PRT_QTY AS PRT_RAT
FROM
    PRT_ORG_MST POM,
    PRT_INV_MST INV
WHERE
    POM.PRD_CD = '{$w_prd_cd}'
    AND POM.STP_CD = '{$w_stp_cd}'
    AND POM.PRT_EXEC_DVS = 'STEQ'
    AND POM.EQU_CD = '{$w_equ_cd}'
    AND POM.PRT_GRP_CD = '%1\$s'
    AND POM.PRT_CD = '%2\$s'
    AND POM.TRC_EXC_FLG = '0'
    AND POM.DEL_FLG = '0'
    AND INV.PRD_CD = POM.PRD_CD
    AND INV.STP_CD = POM.STP_CD
    AND INV.PRT_EXEC_DVS = POM.PRT_EXEC_DVS
    AND INV.EQU_CD = POM.EQU_CD
    AND INV.PRT_GRP_CD = POM.PRT_GRP_CD
    AND INV.PRT_DVS = 'RT'
    AND INV.PRT_CD = POM.PRT_CD
    AND INV.DEL_FLG = '0'

UNION ALL

SELECT
    '2' AS DVS,
    POM.PRT_QTY,
    INV.PRT_QTY AS PRT_RAT
FROM
    PRT_ORG_MST POM,
    PRT_INV_MST INV
WHERE
    POM.PRD_CD = '{$w_prd_cd}'
    AND POM.STP_CD = '{$w_stp_cd}'
    AND POM.PRT_EXEC_DVS = 'ST'
    AND POM.EQU_CD = ' '
    AND POM.PRT_GRP_CD = '%1\$s'
    AND POM.PRT_CD = '%2\$s'
    AND POM.TRC_EXC_FLG = '0'
    AND POM.DEL_FLG = '0'
    AND INV.PRD_CD = POM.PRD_CD
    AND INV.STP_CD = POM.STP_CD
    AND INV.PRT_EXEC_DVS = POM.PRT_EXEC_DVS
    AND INV.EQU_CD = POM.EQU_CD
    AND INV.PRT_GRP_CD = POM.PRT_GRP_CD
    AND INV.PRT_DVS = 'RT'
    AND INV.PRT_CD = POM.PRT_CD
    AND INV.DEL_FLG = '0'

UNION ALL

SELECT
	'3' AS DVS,
	POM.PRT_QTY,
	BAS.PRT_RAT
FROM
	PRT_ORG_MST POM,
	PRT_BAS_MST BAS
WHERE
	POM.PRD_CD = '{$w_prd_cd}'
	AND POM.STP_CD = '{$w_stp_cd}'
	AND POM.PRT_EXEC_DVS = 'STEQ'
	AND POM.EQU_CD = '{$w_equ_cd}'
	AND POM.PRT_GRP_CD = '%1\$s'
	AND POM.PRT_CD = '%2\$s'
	AND POM.TRC_EXC_FLG = '0'
	AND POM.DEL_FLG = '0'
	AND BAS.PRT_CD = POM.PRT_CD
	AND BAS.DEL_FLG = '0'

UNION ALL

SELECT
	'4' AS DVS,
	POM.PRT_QTY,
	BAS.PRT_RAT
FROM
	PRT_ORG_MST POM,
	PRT_BAS_MST BAS
WHERE
	POM.PRD_CD = '{$w_prd_cd}'
	AND POM.STP_CD = '{$w_stp_cd}'
	AND POM.PRT_EXEC_DVS = 'ST'
	AND POM.EQU_CD = ' '
	AND POM.PRT_GRP_CD = '%1\$s'
	AND POM.PRT_CD = '%2\$s'
	AND POM.TRC_EXC_FLG = '0'
	AND POM.DEL_FLG = '0'
	AND BAS.PRT_CD = POM.PRT_CD
	AND BAS.DEL_FLG = '0'

ORDER BY
	DVS
_SQL;

	$w_arr_mat = array();
	for($i=1; $i<=$w_mcnt; $i++){
		#------------------------------------------------------------------
		#
		#------------------------------------------------------------------
		$w_sql = sprintf($w_tmpsql, $w_list_prt_grp_cd[$i], $w_list_prt_cd[$i]);
		$w_stmt = db_res_set($w_sql);
		$w_rtn = db_do($w_stmt);
		if($w_rtn != 0){
			list($g_msg, $g_err_lv) = msg("err_Sel");
			$g_msg = xpt_err_msg($g_msg, "", __LINE__);
			return 4000;
		}

		$w_row = db_fetch_row($w_stmt);
		db_res_free($w_stmt);

		$w_prt_qty = $w_row['PRT_QTY'];
		$w_prt_rat = $w_row['PRT_RAT'];

		$w_use_qty = $w_chp_qty * ($w_prt_qty / 1000) / ($w_prt_rat / 100);

		$w_use_qty = ceil_7($w_use_qty);

		$w_tmp = array
		(
			$w_list_prt_alt[$i]	=> $w_list_mt_lot_id[$i] . "_" . $w_use_qty
		);

		$w_arr_mat = $w_arr_mat + $w_tmp;
	}

	#------------------------------------------------------------------
	# SPACE
	#------------------------------------------------------------------
	$w_rtn = cs_xck_trk_snd_lot($w_lot_id,
								$w_simm,
								$w_equ_cd,
								$w_prg_id,
								$w_usr_id,
								$g_cpu_dts,
								$w_chp_qty,
								$w_sub_qty,
								$w_arr_mat,
								$r_spc_err_cd,
								$r_spc_err_nm,
								$r_spc_err_msg);
	if($w_rtn != 0){
		$g_err_lv = 0;
		$g_msg = xpt_err_msg($g_msg, "", __LINE__);
		return 4000;
	}

	return 0;
}

#==================================================================
# 
#==================================================================
function get_prv_qtymng($w_lot_bas, &$r_subflg)
{
	global $g_msg;
	global $g_err_lv;

	$r_subflg = null;
	#------------------------------------------------------------------
	# 
	#------------------------------------------------------------------
	$w_loopcnt = 0;
	$w_rtn = get_trace($w_lot_bas['LOT_ID'],
					$w_lot_bas['VERB_CAN'],
					$w_lot_bas['DTS_CAN'],
					$w_loopcnt,
					$r_subflg);
	if($w_rtn != 0) return 4000;

	if(!is_null($r_subflg)){
		return 0;
	}

	#------------------------------------------------------------------
	#
	#------------------------------------------------------------------
	$w_rtn = get_prvstp($w_lot_bas,
						$r_subflg);
	if($w_rtn != 0) return 4000;

	if(is_null($r_subflg)){
		$r_subflg = 0;
	}

	return 0;
}
#==================================================================
# 
#==================================================================
function get_prvstp($w_lot_bas, &$r_subflg)
{
	global $g_msg;
	global $g_err_lv;

	#------------------------------------------------------------------
	# 
	#------------------------------------------------------------------
	$w_sql = <<<_SQL
SELECT
	POM2.RT_CD,
	POM2.SEQ_NO_RT,
	POM2.STP_CD,
	PFM.BLC_CLS_3
FROM
	PRD_ORG_MST POM1,
	PRD_ORG_MST POM2,
	PRC_FLW_MST PFM
WHERE
	POM1.RT_CD = '{$w_lot_bas['RT_CD']}'
	AND POM1.PRC_CD = '{$w_lot_bas['PRC_CD']}'
	AND POM1.STP_NO = '{$w_lot_bas['STP_NO']}'
	AND POM1.DEL_FLG = '0'
	AND POM2.RT_CD = POM1.RT_CD
	AND POM2.SEQ_NO_RT < POM1.SEQ_NO_RT
	AND POM2.IO_FLG = '1'
	AND POM2.DEL_FLG = '0'
	AND PFM.PRC_CD = POM2.PRC_CD
	AND PFM.STP_CD = POM2.STP_CD
	AND PFM.DEL_FLG = '0'
ORDER BY
	POM2.SEQ_NO_RT DESC
_SQL;

	$w_stmt = db_res_set($w_sql);
	$w_rtn = db_do($w_stmt);
	if($w_rtn != 0){
		list($g_msg, $g_err_lv) = msg("err_Sel");
		$g_msg = xpt_err_msg($g_msg, "", __LINE__);
		return 4000;
	}

	$w_row = db_fetch_row($w_stmt);
	db_res_free($w_stmt);

	if($w_row){
		$r_subflg = 0;
		if(trim($w_row['BLC_CLS_3']) == constant("B7_SUBSTRATEMNG")){
			$r_subflg = 1;
		}
		return 0;
	}

	#------------------------------------------------------------------
	#
	#------------------------------------------------------------------
	$w_sql = <<<_SQL
SELECT
	POM2.M_RT_FLG_SCH,
	POM2.RT_CD,
	POM2.SEQ_NO_RT,
	POM2.STP_CD,
	PFM.BLC_CLS_3
FROM
	MCP_ORG_MST MOM,
	PRD_ORG_MST POM1,
	PRD_ORG_MST POM2,
	PRC_FLW_MST PFM
WHERE
	MOM.PRD_CD_FIN = '{$w_lot_bas['PRD_CD']}'
	AND MOM.STP_CD = '{$w_lot_bas['STP_CD']}'
	AND MOM.M_PTN_FLG = '1'
	AND MOM.M_PRD_FLG = '1'
	AND MOM.DEL_FLG = '0'
	AND POM1.STP_CD = MOM.STP_CD
	AND POM1.PRD_CD = MOM.PRD_CD_MCP
	AND POM1.DEL_FLG = '0'
	AND POM2.RT_CD = POM1.RT_CD
	AND POM2.SEQ_NO_RT < POM1.SEQ_NO_RT
	AND POM2.IO_FLG = '1'
	AND POM2.DEL_FLG = '0'
	AND PFM.PRC_CD = POM2.PRC_CD
	AND PFM.STP_CD = POM2.STP_CD
	AND PFM.DEL_FLG = '0'
ORDER BY
	POM2.M_RT_FLG_SCH DESC,
	POM2.RT_CD DESC,
	POM2.SEQ_NO_RT DESC
_SQL;

	$w_stmt = db_res_set($w_sql);
	$w_rtn = db_do($w_stmt);
	if($w_rtn != 0){
		list($g_msg, $g_err_lv) = msg("err_Sel");
		$g_msg = xpt_err_msg($g_msg, "", __LINE__);
		return 4000;
	}

	$w_row = db_fetch_row($w_stmt);
	db_res_free($w_stmt);

	if($w_row){
		$r_subflg = 0;
		if(trim($w_row['BLC_CLS_3']) == constant("B7_SUBSTRATEMNG")){
			$r_subflg = 1;
		}
	}


	return 0;
}

#==================================================================
# get LotLog
#==================================================================
function get_trace($w_lot_id, $w_verb, $w_dts, &$w_loopcnt, &$r_subflg)
{
	global $g_msg;
	global $g_err_lv;

	$w_srch_lot_id = trim($w_lot_id);
	$w_srch_verb   = trim($w_verb);
	$w_srch_dts    = trim($w_dts);

	### disable verb
	$w_disverb = array
	(
		"IOSM", "IODI"
	);

	while(1){
		$w_loopcnt++;
		# preventing an infinite loop
		if($w_loopcnt > 500){
			list($g_msg, $g_err_lv) = msg("err_Unexpected");
			$g_msg = xpt_err_msg($g_msg, "", __LINE__);
			return 4000;
		}
		### check disable verb
		if(in_array($w_srch_verb, $w_disverb)){
			list($g_msg, $g_err_lv) = msg("err_Cancel");
			$g_msg = xpt_err_msg($g_msg, $w_srch_verb, __LINE__);
			return 4000;
		}

		#------------------------------------------------------------------
		# IOSP
		#------------------------------------------------------------------
		if($w_srch_verb == "IOSP"){
                        $w_rtn = get_lot_sp_lot_id_prn($w_srch_lot_id, $w_srch_dts, $w_lot_id_prn, $w_dts_prn);
                        if ($w_rtn != 0) {
                                return $w_rtn;
                        }
		
			$w_rtn = get_logsp($w_lot_id_prn,
								$w_dts_prn,
								$w_splog);

			if($w_rtn != 0) return 4000;

			$w_srch_lot_id = trim($w_splog['LOT_ID']);
			$w_srch_verb   = trim($w_splog['VERB_CAN']);
			$w_srch_dts    = trim($w_splog['DTS_CAN']);
		}
		#------------------------------------------------------------------
		# IOMG
		#------------------------------------------------------------------
		elseif($w_srch_verb == "IOMG"){
			$w_rtn = get_logmg($w_srch_lot_id,
								$w_srch_dts,
								$w_mglog);
			if($w_rtn != 0) return 4000;

			$w_srch_lot_id = trim($w_mglog['LOT_ID']);
			$w_srch_verb   = trim($w_mglog['VERB_CAN']);
			$w_srch_dts    = trim($w_mglog['DTS_CAN']);
		}
		#------------------------------------------------------------------
		# IOMI
		#------------------------------------------------------------------
		elseif($w_srch_verb == "IOMI"){
			$w_rtn = get_logmc($w_srch_lot_id,
								$w_srch_dts,
								$w_mclog);
			if($w_rtn != 0) return 4000;

			$w_srch_lot_id = trim($w_mclog['LOT_ID']);
			$w_srch_verb   = trim($w_mclog['VERB_CAN']);
			$w_srch_dts    = trim($w_mclog['DTS_CAN']);
		}
		#------------------------------------------------------------------
		# other
		#------------------------------------------------------------------
		else {
			$w_rtn = get_lotlog($w_srch_lot_id,
								$w_srch_verb,
								$w_srch_dts,
								$w_log);
			if($w_rtn != 0) return 4000;

			if(trim($w_srch_verb) == "IOMV"
			|| trim($w_srch_verb) == "PRPC"
			){
				$r_subflg = 0;
				if(trim($w_log['BLC_CLS_3']) == constant("B7_SUBSTRATEMNG")){
					$r_subflg = 1;
				}
				break;
			}

			$w_srch_verb = trim($w_log['VERB_CAN']);
			$w_srch_dts  = trim($w_log['DTS_CAN']);

			if(trim($w_srch_verb) == "IORV"
			|| trim($w_srch_verb) == "IOCR"
			|| trim($w_srch_verb) == "PDCR"
			){
				break;
			}
		}
	}

	return 0;
}

#==================================================================
# get CTG_LOG
#==================================================================
function get_ctglog($w_lot_id, $w_ctgdvs, $w_ctgcd, &$r_dat)
{
	global $g_msg;
	global $g_err_lv;

	$r_dat = array();

	$w_sql = <<<_SQL
SELECT
	*
FROM
	CTG_LOG
WHERE
	LOT_ID = '{$w_lot_id}'
	AND CTG_DVS_CD = '{$w_ctgdvs}'
	AND CTG_CD = '{$w_ctgcd}'
	AND DEL_FLG = '0'
_SQL;

	$w_stmt = db_res_set($w_sql);
	$w_rtn = db_do($w_stmt);
	if($w_rtn != 0){
		list($g_msg, $g_err_lv) = msg("err_Sel");
		$g_msg = xpt_err_msg($g_msg, "LOT_INF_TBL", __LINE__);
		return 4000;
	}

	if($w_row = db_fetch_row($w_stmt)){
		foreach($w_row as $key => $val){
			$w_row[$key] = trim($w_row[$key]);
		}
		$r_dat = $w_row;
	}
	db_res_free($w_stmt);

	return 0;
}


#=================================================
# CTG_LOG Insert
#=================================================
function ins_ctg_log($w_ctg_dvs_cd, $w_ctg_cd, $w_ctg_dat_txt, $w_lot_bas){
	global $gw_scr;
	global $g_msg;
	global $g_err_lv;
	global $g_cpu_dts;
	global $g_low_dts;

	$w_ins = array(
				"DEL_FLG"               => "0",
				"CTG_DVS_CD"   		=> $w_ctg_dvs_cd,
				"PRD_CD"                => $w_lot_bas['PRD_CD'],
				"PRC_CD"                => $w_lot_bas['PRC_CD'],
				"STP_NO"                => $w_lot_bas['STP_NO'],
				"PRC_CLS_4"             => $w_lot_bas['PRC_CLS_4'],
				"STP_CD"                => $w_lot_bas['STP_CD'],
				"CTG_CD"                => $w_ctg_cd,
				"LOT_ID"                => $w_lot_bas['LOT_ID'],
				"EQU_CD"                => $w_lot_bas['EQU_CD'],
				"SL_ID"                 => " ",
				"QTY"                   => 0,
				"CTG_DAT_TXT"  		=> $w_ctg_dat_txt,
				"CRT_DTS"               => $g_cpu_dts,
				"USR_ID_CRT"   		=> $gw_scr['s_usr_id'],
				"UPD_DTS"               => $g_low_dts,
				"USR_ID_UPD"   		=> " ",
				"UPD_LEV"               => "1"
		);

	$w_rtn = db_insert("CTG_LOG", $w_ins);
	if ($w_rtn != 0) {
			list($g_msg, $g_err_lv) = PSSEM01001301_msg("err_Ins_CtgLog");
			$g_msg = xpt_err_msg($g_msg, "", __LINE__);
			return $w_rtn;
	}

	return 0;
}



#==================================================================
# get Normal Tracking Log
#==================================================================
function get_lotlog($w_lot_id, $w_verb, $w_dts, &$r_dat)
{
	global $g_msg;
	global $g_err_lv;

	$w_sql = <<<_SQL
SELECT
	LLG.LOT_ID,
	LLG.VERB_CAN,
	LLG.DTS_CAN,
	PFM.BLC_CLS_3
FROM
	LOT_LOG LLG,
	PRC_FLW_MST PFM
WHERE
	LLG.LOT_ID = '{$w_lot_id}'
	AND LLG.VERB = '{$w_verb}'
	AND LLG.CRT_DTS = '{$w_dts}'
	AND LLG.DEL_FLG = '0'
	AND PFM.PRC_CD = LLG.PRC_CD
	AND PFM.STP_NO = LLG.STP_NO
	AND PFM.DEL_FLG = '0'
_SQL;
	$w_stmt = db_res_set($w_sql);
	$w_rtn = db_do($w_stmt);
	if($w_rtn != 0){
		list($g_msg, $g_err_lv) = msg("err_Sel");
		$g_msg = xpt_err_msg($g_msg, "LOT_LOG", __LINE__);
		return 4000;
	}

	$w_row = db_fetch_row($w_stmt);
	db_res_free($w_stmt);

	if(!$w_row){
		list($g_msg, $g_err_lv) = msg("err_Mis_Log");
		$w_tg = get_tg($w_lot_id, $w_verb, $w_dts);
		$g_msg = xpt_err_msg($g_msg, $w_tg, __LINE__);
		return 4000;
	}

	$r_dat = $w_row;

	return 0;
}


function getBUYield(
			$p_prd_cd,
			$p_stp_cd,
			&$p_stp_yield
){
	$w_sql =	"(SELECT "
			.   " * " 
			.   " FROM " 
			.   " YLD_MST YM " 
			.   " WHERE " 
			.   " YM.PRD_CD = '" .trim($p_prd_cd) . "' "
			.   " AND YM.STP_CD = '" .trim($p_stp_cd) . "' "
			.   " AND YM.DEL_FLG = '0' "
			.   ") UNION ("
			.   "SELECT "
			.   " * " 
			.   " FROM " 
			.   " YLD_MST YM " 
			.   " WHERE " 
			.   " YM.PRD_CD = ' '"
			.   " AND YM.STP_CD = '" . trim($p_stp_cd) . "'"
			.   " AND YM.DEL_FLG = '0' "
			.")";

	$w_rtn = xdb_op_conndb();
	$w_stmt = db_res_set($w_sql);
	$w_rtn  = db_do($w_stmt);
	if ($w_rtn) {
		return 4000;
	}
	$w_arr_ylds = array();
	$p_prd_cd_buff = "";
	while($w_row = db_fetch_row($w_stmt)){
		$w_arr_ylds[trim($w_row['PRD_CD'])][trim($w_row['STP_CD'])] = trim($w_row["YLD_1"]);
		if(trim($w_row['PRD_CD']) != ""){
			$p_prd_cd_buff = trim($w_row['PRD_CD']);
		}
	}
	db_res_free($w_stmt);
	$w_rtn = xdb_op_closedb();

	if(count($w_arr_ylds) > 0 ){
		
		$p_stp_yield = $w_arr_ylds[$p_prd_cd_buff][trim($p_stp_cd)];
		if($p_stp_yield == ""){
			$p_stp_yield = "100";
		}elseif($p_stp_yield == 0){
			$p_stp_yield = "0";
		}
		/*elseif(is_test_step($p_stp_cd) && $p_stp_yield >= 10){
			$p_stp_yield = $p_stp_yield - 10;
		}elseif(is_test_step($p_stp_cd) && $p_stp_yield < 10){
			$p_stp_yield = 0;
		}elseif((!is_test_step($p_stp_cd)) && $p_stp_yield >= 2){
			$p_stp_yield = $p_stp_yield - 2;
		}elseif((!is_test_step($p_stp_cd)) && $p_stp_yield < 2){
			$p_stp_yield = 0;
		}*/
		
	}else{
		$p_stp_yield = "100";
	}
	
	return 0;
}


#==================================================================
# get Split Log
#==================================================================
function get_logsp($w_lot_id, $w_dts, &$r_log)
{
	global $g_msg;
	global $g_err_lv;

	$w_sql = <<<_SQL
SELECT DISTINCT
	LLG.LOT_ID,
	LLG.VERB_CAN,
	LLG.CRT_DTS,
	LLG.DTS_CAN
FROM
	LOT_SP_TBL LSP,
	LOT_LOG LLG
WHERE
	LSP.LOT_ID = '{$w_lot_id}'
	AND LSP.CRT_DTS = '{$w_dts}'
	AND LLG.LOT_ID = LSP.LOT_ID_PRN
	AND LLG.VERB = 'IOSP'
	AND LLG.CRT_DTS = LSP.CRT_DTS
	AND LLG.DEL_FLG = '0'
_SQL;
	$w_stmt = db_res_set($w_sql);
	$w_rtn = db_do($w_stmt);
	if($w_rtn != 0){
		list($g_msg, $g_err_lv) = msg("err_Sel");
		$g_msg = xpt_err_msg($g_msg, "LOT_SP_TBL", __LINE__);
		return 4000;
	}

	$w_row = db_fetch_row($w_stmt);
	db_res_free($w_stmt);

	if(!$w_row){
		list($g_msg, $g_err_lv) = msg("err_Mis_Log");
		$w_tg = get_tg($w_lot_id, $w_stp_cd, $w_dts, "IOSP");
		$g_msg = xpt_err_msg($g_msg, $w_tg, __LINE__);
		return 4000;
	}

	$r_log = $w_row;

	return 0;
}


#==================================================================
# Get Lot Split Lot Data
#==================================================================
function get_lot_sp_lot_id_prn($w_lot_id, $w_dts, &$r_lot_id_prn, &$r_dts_prn)
{
        global $g_msg;
        global $g_err_lv;

        $w_sql = <<<SQL

SELECT
        LOT_ID,
        CRT_DTS
FROM
        LOT_SP_TBL
WHERE
        LOT_ID = '{$w_lot_id}'
        AND CRT_DTS = '{$w_dts}'

SQL;

        $w_stmt = db_res_set($w_sql);
        $w_rtn = db_do($w_stmt);
        if ($w_rtn != 0) {
                list($g_msg, $g_err_lv) = msg("err_Sel");
                $g_msg = xpt_err_msg($g_msg, "", __LINE__);
                return $w_rtn;
        }

        $w_row = db_fetch_row($w_stmt);

        db_res_free($w_stmt);

        if ($w_row) {
                $r_lot_id_prn = trim($w_row['LOT_ID']);
                $r_dts_prn    = $w_row['CRT_DTS'];
                return 0;
        }

        unset($w_stmt, $w_row);
        $w_sql = <<<SQL

SELECT
        LOT_ID,
        CRT_DTS
FROM
        LOT_SP_TBL
WHERE
        LOT_ID_PRN = '{$w_lot_id}'
        AND CRT_DTS = '{$w_dts}'

SQL;

        $w_stmt = db_res_set($w_sql);
        $w_rtn = db_do($w_stmt);
        if($w_rtn != 0){
                list($g_msg, $g_err_lv) = msg("err_Sel");
                $g_msg = xpt_err_msg($g_msg, "", __LINE__);
                return $w_rtn;
        }

        $w_row = db_fetch_row($w_stmt);

        db_res_free($w_stmt);

        if(!$w_row){
                list($g_msg, $g_err_lv) = msg("err_Sel");
                $g_msg = xpt_err_msg($g_msg, "", __LINE__);
                return 4000;
        }

        $r_lot_id_prn = trim($w_row['LOT_ID']);
        $r_dts_prn    = $w_row['CRT_DTS'];

        return 0;
}

#==================================================================
# Verify if Finished with step
#==================================================================
function check_VerbOnStep($w_lot_id,
									$w_verb,
									$w_stp_cd,
									&$r_bln_check
									)
{
	global $g_msg;
	global $g_err_lv;
	$r_bln_check = FALSE;

	$w_sql = <<<_SQL
SELECT
	count(*) as COUNTA
FROM
	LOT_LOG
WHERE
	LOT_ID = '{$w_lot_id}'
	AND VERB = '{$w_verb}'
	AND STP_CD = '{$w_stp_cd}'
	AND DEL_FLG = '0'
_SQL;

	$w_stmt = db_res_set($w_sql);
	$w_rtn = db_do($w_stmt);
	if($w_rtn != 0){
		$g_msg = cs_xck_exst_child_msg("err_Sel");
		return 4000;
	}

	$w_row = db_fetch_row($w_stmt);
	db_res_free($w_stmt);

	if($w_row['COUNTA'] > 0){
		$r_bln_check = TRUE;
	}


	return 0;
}

#==================================================================
# Verify if Finished with Ftest step
#==================================================================
function check_FtestStep($w_lot_id,
                                                                        $w_verb,
                                                                        $w_e9_cd,
                                                                        &$r_bln_check
                                                                        )
{
        global $g_msg;
        global $g_err_lv;
        $r_bln_check = FALSE;

        $w_sql = <<<_SQL
SELECT
        count(*) as COUNTA
FROM
        LOT_LOG
WHERE
        LOT_ID = '{$w_lot_id}'
        AND VERB = '{$w_verb}'
        AND STP_CD IN (select stp_cd from stp_mst where stp_cls_2 = '{$w_e9_cd}' and del_flg = '0')
        AND DEL_FLG = '0'
_SQL;

        $w_stmt = db_res_set($w_sql);
        $w_rtn = db_do($w_stmt);
        if($w_rtn != 0){
                $g_msg = cs_xck_exst_child_msg("err_Sel");
                return 4000;
        }

        $w_row = db_fetch_row($w_stmt);
        db_res_free($w_stmt);

        #echo $w_sql;

        if($w_row['COUNTA'] > 0){
                $r_bln_check = TRUE;
        }


        return 0;
}



#==================================================================
# get Merge Log
#==================================================================
function get_logmg($w_lot_id, $w_dts, &$r_log)
{
	global $g_msg;
	global $g_err_lv;

	$w_sql = <<<_SQL
SELECT
	LLG.LOT_ID,
	LLG.LOT_ID_T,
	LLG.VERB_CAN,
	LLG.DTS_CAN
FROM
	LOT_MG_TBL LMG,
	LOT_LOG LLG
WHERE
	LMG.LOT_ID_T = '{$w_lot_id}'
	AND LMG.CRT_DTS = '{$w_dts}'
	AND LLG.LOT_ID = LMG.LOT_ID
	AND LLG.VERB = 'IOMG'
	AND LLG.CRT_DTS = LMG.CRT_DTS
	AND LLG.DEL_FLG = '0'
_SQL;

	$w_stmt = db_res_set($w_sql);
	$w_rtn = db_do($w_stmt);
	if($w_rtn != 0){
		list($g_msg, $g_err_lv) = msg("err_Sel");
		$g_msg = xpt_err_msg($g_msg, "LOT_MG_TBL", __LINE__);
		return 4000;
	}

	$cnt = 0;
	$w_tmp = array();
	$r_log = array();
	while($w_row = db_fetch_row($w_stmt)){
		$cnt++;
		if(trim($w_row['LOT_ID']) == trim($w_row['LOT_ID_T'])){
			$r_log = $w_row;
			break;
		}
	}
	db_res_free($w_stmt);

	if($cnt == 0){
		list($g_msg, $g_err_lv) = msg("err_Mis_Log");
		$w_tg = get_tg($w_lot_id, $w_dts, "IOMG");
		$g_msg = xpt_err_msg($g_msg, $w_tg, __LINE__);
		return 4000;
	}

	return 0;
}

#==================================================================
# get Multi-Chip Log
#==================================================================
function get_logmc($w_lot_id, $w_dts, &$r_log)
{
	global $g_msg;
	global $g_err_lv;

	$w_sql = <<<_SQL
SELECT
	LLG.LOT_ID,
	LLG.VERB_CAN,
	LLG.DTS_CAN
FROM
	LOT_MC_TBL LMC,
	LOT_LOG LLG,
	MCP_ORG_MST MOM
WHERE
	LMC.LOT_ID = '{$w_lot_id}'
	AND LMC.CRT_DTS = '{$w_dts}'
	AND LLG.LOT_ID = LMC.LOT_ID_PRN
	AND LLG.VERB = 'IOMO'
	AND LLG.CRT_DTS = LMC.CRT_DTS
	AND LLG.DEL_FLG = '0'
	AND MOM.STP_CD = LLG.STP_CD
	AND MOM.PRD_CD_FIN = LLG.PRD_CD_T
	AND MOM.PRD_CD_MCP = LLG.PRD_CD
	AND MOM.M_PRD_FLG = 1
	AND MOM.DEL_FLG = '0'
_SQL;

	$w_stmt = db_res_set($w_sql);
	$w_rtn = db_do($w_stmt);
	if($w_rtn != 0){
		list($g_msg, $g_err_lv) = msg("err_Sel");
		$g_msg = xpt_err_msg($g_msg, "LOT_MC_TBL", __LINE__);
		return 4000;
	}

	$cnt = 0;
	$w_row = db_fetch_row($w_stmt);
	db_res_free($w_stmt);

	if(!$w_row){
		list($g_msg, $g_err_lv) = msg("err_Mis_Log");
		$g_msg = xpt_err_msg($g_msg, "IOMO", __LINE__);
		return 4000;
	}

	$r_log = $w_row;

	return 0;
}

#==================================================================
# 
#==================================================================
function check_input($w_mode)
{
	global $gw_scr;
	global $g_msg;
	global $g_err_lv;

	switch ($w_mode) {
	#------------------------------------------------------------------
	#
	#------------------------------------------------------------------
	case 1:
		#------------------------------------------------------------------
		#
		#------------------------------------------------------------------
		$gw_scr['s_usr_id'] = strtoupper(trim($gw_scr['s_usr_id']));
		$gw_scr['s_lot_id'] = strtoupper(trim($gw_scr['s_lot_id']));
		$gw_scr['s_equ_cd'] = strtoupper(trim($gw_scr['s_equ_cd']));

		#------------------------------------------------------------------
		#
		#------------------------------------------------------------------
		list($g_msg, $g_err_lv) = msg("err_Nec_Input");
		if($gw_scr['s_usr_id'] == ""){
			$g_msg = xpt_err_msg($g_msg, itm("UsrId"), __LINE__);
			return 4000;
		}
		if($gw_scr['s_lot_id'] == ""){
			$g_msg = xpt_err_msg($g_msg, itm("LotID"), __LINE__);
			return 4000;
		}
		if($gw_scr['s_equ_cd'] == ""){
			$g_msg = xpt_err_msg($g_msg, itm("EquCd"), __LINE__);
			return 4000;
		}

		#------------------------------------------------------------------
		#
		#------------------------------------------------------------------
		list($g_msg, $g_err_lv) = msg("err_Inp_Tag");
		$w_tg = substr($gw_scr['s_usr_id'], 0, 2);
		if($w_tg != constant("TG_MA")){
			$w_tg = get_tg(itm("UsrId"));
			$g_msg = xpt_err_msg($g_msg, $w_tg, __LINE__);
			return 4000;
		}
		$w_tg = substr($gw_scr['s_lot_id'], 0, 2);
		if($w_tg != constant("TG_LT")){
			$w_tg = get_tg(itm("LotID"));
			$g_msg = xpt_err_msg($g_msg, $w_tg, __LINE__);
			return 4000;
		}
		$w_tg = substr($gw_scr['s_equ_cd'], 0, 2);
		if($w_tg != constant("TG_EQ")){
			$w_tg = get_tg(itm("EquCd"));
			$g_msg = xpt_err_msg($g_msg, $w_tg, __LINE__);
			return 4000;
		}

		#------------------------------------------------------------------
		# 
		#------------------------------------------------------------------
		list($g_msg, $g_err_lv) = msg("err_Inp_Char");
		if(!check_eisu($gw_scr['s_usr_id'])){
			$w_tg = get_tg(itm("UsrId"), $gw_scr['s_usr_id']);
			$g_msg = xpt_err_msg($g_msg, $w_tg, __LINE__);
			return 4000;
		}
		if(!check_err_lot($gw_scr['s_lot_id'])){
			$w_tg = get_tg(itm("LotID"), $gw_scr['s_lot_id']);
			$g_msg = xpt_err_msg($g_msg, $w_tg, __LINE__);
			return 4000;
		}
		if(!check_err_code($gw_scr['s_equ_cd'])){
			$w_tg = get_tg(itm("EquCd"), $gw_scr['s_equ_cd']);
			$g_msg = xpt_err_msg($g_msg, $w_tg, __LINE__);
			return 4000;
		}
		break;

	#------------------------------------------------------------------
	#
	#------------------------------------------------------------------
	case 2:
		#------------------------------------------------------------------
		# 
		#------------------------------------------------------------------
		$gw_scr['s_chp_qty']  = trim($gw_scr['s_chp_qty']);
		$gw_scr['s_sub_qty']  = trim($gw_scr['s_sub_qty']);
		$gw_scr['s_sl_qty']  = trim($gw_scr['s_sl_qty']);
		$gw_scr['s_prg_id']   = strtoupper(trim($gw_scr['s_prg_id']));
		$gw_scr['s_tester']   = strtoupper(trim($gw_scr['s_tester']));
		$gw_scr['s_fixture']   = strtoupper(trim($gw_scr['s_fixture']));
		$gw_scr['s_board_pin']   = strtoupper(trim($gw_scr['s_board_pin']));
		$gw_scr['s_len_pin']   = strtoupper(trim($gw_scr['s_len_pin']));

		$gw_scr['s_powerEye_input']   = strtoupper(trim($gw_scr['s_powerEye_input']));
		$gw_scr['s_powerEye_output']   = strtoupper(trim($gw_scr['s_powerEye_output']));
		$gw_scr['s_powerEye_failure']   = strtoupper(trim($gw_scr['s_powerEye_failure']));
		$gw_scr['s_powerEye_userId']   = strtoupper(trim($gw_scr['s_powerEye_userId']));

		if($gw_scr['s_mgzn_flg'] == "1"){
			for($i=1; $i<= $gw_scr['s_h_disp_row']; $i++){
				$gw_scr['s_list_mgzn_id'][$i] = strtoupper(trim($gw_scr['s_list_mgzn_id'][$i]));
			}
		}
		if($gw_scr['s_stp_cls_2'] == constant("E9_BAKING")){
			$gw_scr['s_metal_wght']   = strtoupper(trim($gw_scr['s_metal_wght']));
		}
		$gw_scr['s_cmt'] = trim($gw_scr['s_cmt']);
		#------------------------------------------------------------------
		#
		#------------------------------------------------------------------
		list($g_msg, $g_err_lv) = msg("err_Nec_Input");
		if($gw_scr['s_chp_flg'] == "1"){
			if($gw_scr['s_chp_qty'] == ""){
				$g_msg = xpt_err_msg($g_msg, itm("ChpQty"), __LINE__);
				return 4000;
			}
		}
		if($gw_scr['s_sub_flg'] == "1"){
			if($gw_scr['s_sub_qty'] == ""){
				$g_msg = xpt_err_msg($g_msg, itm("SubQty"), __LINE__);
				return 4000;
			}
		}
		if($gw_scr['s_sl_flg'] == "1"){
			if($gw_scr['s_sl_qty'] == ""){
				$g_msg = xpt_err_msg($g_msg, itm("SliceQty"), __LINE__);
				return 4000;
			}
		}
		if($gw_scr['s_testing_flg'] == "1"){
			if($gw_scr['s_prg_id'] == ""){
				$g_msg = xpt_err_msg($g_msg, itm("PrgID"), __LINE__);
				return 4000;
			}
		}
		if($gw_scr['s_mgzn_flg'] == "1"){
			$w_inp_flg = 0;
			for($i=1; $i<= $gw_scr['s_h_disp_row']; $i++){
				if($gw_scr['s_list_mgzn_id'][$i] != ""){
					$w_inp_flg = 1;
				}
			}
			if($w_inp_flg == 0){
				$g_msg = xpt_err_msg($g_msg, itm("MgznID"), __LINE__);
				return 4000;
			}
		}
		if($gw_scr['s_stp_cls_2'] == constant("E9_BAKING")){
			if($gw_scr['s_metal_wght'] == ""){
				$g_msg = xpt_err_msg($g_msg, itm("MtlWght"), __LINE__);
				return 4000;
			}
		}
		#------------------------------------------------------------------
		# 
		#------------------------------------------------------------------
		list($g_msg, $g_err_lv) = msg("err_Inp_Char");
		if($gw_scr['s_chp_flg'] == "1"){
			if(!check_num($gw_scr['s_chp_qty'])){
				$w_tg = get_tg(itm("ChpQty"), $gw_scr['s_chp_qty']);
				$g_msg = xpt_err_msg($g_msg, $w_tg, __LINE__);
				return 4000;
			}
		}
		if($gw_scr['s_sub_flg'] == "1"){
			if(!check_num($gw_scr['s_sub_qty'])){
				$w_tg = get_tg(itm("SubQty"), $gw_scr['s_sub_qty']);
				$g_msg = xpt_err_msg($g_msg, $w_tg, __LINE__);
				return 4000;
			}
		}
		if($gw_scr['s_sl_flg'] == "1"){
			if(!check_num($gw_scr['s_sl_qty'])){
				$w_tg = get_tg(itm("SliceQty"), $gw_scr['s_sl_qty']);
				$g_msg = xpt_err_msg($g_msg, $w_tg, __LINE__);
				return 4000;
			}
		}
		if(!check_ascii2($gw_scr['s_prg_id'])){
			$w_tg = get_tg(itm("PrgID"), $gw_scr['s_prg_id']);
			$g_msg = xpt_err_msg($g_msg, $w_tg, __LINE__);
			return 4000;
		}
		if(!check_ascii2($gw_scr['s_tester'])){
			$w_tg = get_tg(itm("Tester"), $gw_scr['s_tester']);
			$g_msg = xpt_err_msg($g_msg, $w_tg, __LINE__);
			return 4000;
		}
		if(!check_ascii2($gw_scr['s_fixture'])){
			$w_tg = get_tg(itm("Fixture"), $gw_scr['s_fixture']);
			$g_msg = xpt_err_msg($g_msg, $w_tg, __LINE__);
			return 4000;
		}

		

		if($gw_scr['s_pic_prsl_testing_flg'] == "1"){
			list($g_msg, $g_err_lv) = msg("err_Nec_Input");
			if($gw_scr['s_powerEye_input'] == ""){
				$g_msg = xpt_err_msg($g_msg, itm("PowerEyeInputQty"), __LINE__);
				return 4000;
			}
			if($gw_scr['s_powerEye_output'] == ""){
				$g_msg = xpt_err_msg($g_msg, itm("PowerEyeOutputQty"), __LINE__);
				return 4000;
			}
			if($gw_scr['s_powerEye_failure'] == ""){
				$g_msg = xpt_err_msg($g_msg, itm("PowerEyeFailureQty"), __LINE__);
				return 4000;
			}
			
			if($gw_scr['s_powerEye_userId'] == ""){
				$g_msg = xpt_err_msg($g_msg, itm("PowerEyeUserID"), __LINE__);
				return 4000;
			}

			if($gw_scr['s_board_pin'] == ""){
				$g_msg = xpt_err_msg($g_msg, itm("BoardPin"), __LINE__);
				return 4000;
			}

			if($gw_scr['s_len_pin'] == ""){
				$g_msg = xpt_err_msg($g_msg, itm("LenPin"), __LINE__);
				return 4000;
			}
		
			list($g_msg, $g_err_lv) = msg("err_Inp_Char");
			if(!check_ascii2($gw_scr['s_powerEye_input'])){
				$w_tg = get_tg(itm("PowerEyeInputQty"), $gw_scr['s_powerEye_input']);
				$g_msg = xpt_err_msg($g_msg, $w_tg, __LINE__);
				return 4000;
			}
			if(!check_ascii2($gw_scr['s_powerEye_output'])){
				$w_tg = get_tg(itm("PowerEyeOutputQty"), $gw_scr['s_powerEye_output']);
				$g_msg = xpt_err_msg($g_msg, $w_tg, __LINE__);
				return 4000;
			}
			if(!check_ascii2($gw_scr['s_powerEye_failure'])){
				$w_tg = get_tg(itm("PowerEyeFailureQty"), $gw_scr['s_powerEye_failure']);
				$g_msg = xpt_err_msg($g_msg, $w_tg, __LINE__);
				return 4000;
			}

			if(!check_ascii2($gw_scr['s_powerEye_userId'])){
				$w_tg = get_tg(itm("PowerEyeUserID"), $gw_scr['s_powerEye_userId']);
				$g_msg = xpt_err_msg($g_msg, $w_tg, __LINE__);
				return 4000;
			}

			if(!check_ascii2($gw_scr['s_board_pin'])){
				$w_tg = get_tg(itm("BoardPin"), $gw_scr['s_board_pin']);
				$g_msg = xpt_err_msg($g_msg, $w_tg, __LINE__);
				return 4000;
			}
			if(!check_ascii2($gw_scr['s_len_pin'])){
				$w_tg = get_tg(itm("LedPin"), $gw_scr['s_len_pin']);
				$g_msg = xpt_err_msg($g_msg, $w_tg, __LINE__);
				return 4000;
			}
		}

		if($gw_scr['s_mgzn_flg'] == "1"){
			for($i=1; $i<= $gw_scr['s_h_disp_row']; $i++){
				if(!check_err_code($gw_scr['s_list_mgzn_id'][$i])){
					$w_tg = get_tg(itm("MgznID"), $gw_scr['s_list_mgzn_id'][$i]);
					$g_msg = xpt_err_msg($g_msg, $w_tg, __LINE__);
					return 4000;
				}
			}
		}
		if($gw_scr['s_stp_cls_2'] == constant("E9_BAKING")){
			if(!check_err_code($gw_scr['s_metal_wght'])){
				$w_tg = get_tg(itm("MtlWght"), $gw_scr['s_metal_wght']);
				$g_msg = xpt_err_msg($g_msg, $w_tg, __LINE__);
				return 4000;
			}
		}
		if(!check_err_cmt($gw_scr['s_cmt'])){
			$g_msg = xpt_err_msg($g_msg, itm("Cmt"), __LINE__);
			return 4000;
		}
		break;
	}

	$g_msg    = "";
	$g_err_lv = "";

	return 0;
}
#==================================================================
# Set Init
#==================================================================
function set_init($w_mode, $w_rtn = 0)
{
	global $gw_scr;
	global $g_page_stp;

	if($w_mode == 1){
		$gw_scr['s_usr_id'] = "";
		$gw_scr['s_lot_id'] = "";
		$gw_scr['s_equ_cd'] = "";

		$gw_scr['s_disp_row']   = constant("DEF_MGZN_ROW");
		$gw_scr['s_h_disp_row'] = constant("DEF_MGZN_ROW");
	}

	if($w_mode <= 2){
		$gw_scr['s_chp_qty']  = "";
		$gw_scr['s_sub_qty']  = "";
		$gw_scr['s_sl_qty']  = "";
		
		$gw_scr['s_prg_id'] = "";
		$gw_scr['s_tester'] = "";
		$gw_scr['s_fixture'] = "";
				
		$gw_scr['s_pct_prsal_input']     	= "";
		$gw_scr['s_pct_prsal_fail']     	= "";
		$gw_scr['s_pct_prsal_yield']     	= "";
		
		$gw_scr['s_list_mgzn_id'] = array();

		$gw_scr['s_metal_wght'] = "";
		$gw_scr['s_cmt'] = "";

		if($w_mode == 1 || $w_rtn == 1){
			$gw_scr['s_usr_nm'] 		= "";
			$gw_scr['s_equ_nm'] 		= "";
			$gw_scr['s_upd_lev']       	= "";
			$gw_scr['s_chp_flg']       	= "";
			$gw_scr['s_sub_flg']      	= "";
			$gw_scr['s_sl_flg']       	= "";
			$gw_scr['s_testing_flg']     	= "";
			$gw_scr['s_pic_prsl_testing_flg'] ="";
			$gw_scr['s_mgzn_flg']      	= "";
			$gw_scr['s_disp_row']      	= constant("DEF_MGZN_ROW");
			$gw_scr['s_h_disp_row']    	= constant("DEF_MGZN_ROW");
			$gw_scr['s_io_blc_nm']  	= "";
			$gw_scr['s_prd_nm']     	= "";
			$gw_scr['s_rnk_ptn']    	= "";
			$gw_scr['s_pkg_nm']     	= "";
			$gw_scr['s_lot_no_str'] 	= "";
			$gw_scr['s_chp_qty']    	= "";
			$gw_scr['s_sub_qty']    	= "";
			$gw_scr['s_sl_qty']    		= "";
			$gw_scr['s_prg_id']     	= "";
			$gw_scr['s_tester'] 		= "";
			$gw_scr['s_fixture'] 		= "";
			$gw_scr['s_cmt'] 		= "";
		}

		$gw_scr['s_prd_cd']   = "";
		$gw_scr['s_stp_cd']   = "";
		$gw_scr['s_prt_ctrl'] = "";

		$g_page_stp = "";
	}

	return 0;
}
#==================================================================
#
#==================================================================
function scr_bf_setting()
{
	global $gw_scr;
	global $g_mode;

	return;
}
#==================================================================
#
#==================================================================
function scr_af_setting()
{
	global $gw_scr;
	global $g_mode;

	if($g_mode == 2){
		### Chip
		$gw_scr['s_ro_chp_qty'] = "true";
		$gw_scr['s_ic_chp_qty'] = "dis_text";
		if($gw_scr['s_chp_flg'] == "1"){
			$gw_scr['s_ro_chp_qty'] = "";
			$gw_scr['s_ic_chp_qty'] = "";
		}
		### Substrate
		$gw_scr['s_ro_sub_qty'] = "true";
		$gw_scr['s_ic_sub_qty'] = "dis_text";
		if($gw_scr['s_sub_flg'] == "1"){
			$gw_scr['s_ro_sub_qty'] = "";
			$gw_scr['s_ic_sub_qty'] = "";
		}
		### Slice
		$gw_scr['s_ro_sl_qty'] = "true";
		$gw_scr['s_ic_sl_qty'] = "dis_text";
		if($gw_scr['s_sl_flg'] == "1"){
			$gw_scr['s_ro_sl_qty'] = "";
			$gw_scr['s_ic_sl_qty'] = "";
		}
		### TESING
		$gw_scr['s_ro_testing'] = "true";
		$gw_scr['s_ic_testing'] = "dis_text";
		if($gw_scr['s_testing_flg'] == "1"){
			$gw_scr['s_ro_testing'] = "";
			$gw_scr['s_ic_testing'] = "";
		}
	
		$gw_scr['s_dis_redisp']  = "true";
		$gw_scr['s_ro_disp_row'] = "true";
		$gw_scr['s_ro_mgzn_id']  = "true";
		$gw_scr['s_ic_disp_row'] = "dis_text";
		$gw_scr['s_ic_mgzn_id']  = "dis_text";
		if($gw_scr['s_mgzn_flg'] == "1"){
			$gw_scr['s_dis_redisp']  = "";
			$gw_scr['s_ro_disp_row'] = "";
			$gw_scr['s_ro_mgzn_id']  = "";
			$gw_scr['s_ic_disp_row'] = "";
			$gw_scr['s_ic_mgzn_id']  = "";
		}
	}

	return;
}
#==================================================================
#
#==================================================================
function rearray(&$arr)
{
	if(isset($arr[0])){
		$tmp = array();
		$cnt = 0;
		for($i=0; $i<count($arr); $i++){
			$cnt++;
			$tmp[$cnt] = $arr[$i];
		}
		$arr = $tmp;
	}
	return;
}
#==================================================================
#
#==================================================================
function userialize($w_arr)
{
	return str_replace("\"", "~", serialize($w_arr));
}
#==================================================================
# 
#==================================================================
function uunserialize($w_serial)
{
	return unserialize(str_replace("~", "\"", $w_serial));
}
#==================================================================
# 
#==================================================================
function str_escape($str){
	return str_replace(array('%', '_', '*'), array('$%', '$_', ''), $str);
}
#==================================================================
#
#==================================================================
function ceil_7($w_val){
	$w_str = (string)$w_val;
	list($w_int, $w_dec) = split("\.", $w_str);

	if(strlen($w_dec) > 6){
		if(substr($w_dec, 6, 1) != 0){
			$w_val = $w_val + 0.000001;
		}

		unset($w_int, $w_dec, $w_str);
		$w_str = (string)$w_val;
		list($w_int, $w_dec) = split("\.", $w_str);
		$w_dec = rtrim(substr($w_dec, 0, 6), "0");

		if(strlen($w_dec) > 1){
			$w_rtn_val = $w_int . "." . $w_dec;
		} else {
			$w_rtn_val = $w_int;
		}
	} else {
		$w_rtn_val = $w_val;
	}

	return $w_rtn_val;

}
#==================================================================
# Get TG
#==================================================================
function get_tg()
{
	$w_arr = func_get_args();
	return implode("/", $w_arr);
}
#==================================================================
# Lang Helper
#==================================================================
function itm($var)
{
	return PS00S01002300_item($var);
}
function msg($var)
{
	return PS00S01002300_msg($var);
}
#******************************************************************
#******************************************************************
#******************************************************************
#******************************************************************
#******************************************************************
#
# MAIN END
#
#******************************************************************
#==================================================================
# DB
#==================================================================
$w_rtn = xdb_op_conndb();
if ($w_rtn != 0) {
	$g_err_lv = 0;
	$g_msg = xpt_err_msg($g_msg, "", __LINE__);
	return;
}
#==================================================================
#
#==================================================================
if($gw_scr['s_rtn_flg']){
	get_session_convert();
}

get_session_mode();

if($gw_scr['s_cnfm_flg'] != "1" && $gw_scr['s_rtn_flg'] == "1"){
	$g_page_stp = "";
}
#==================================================================
#
#==================================================================
$refe_flg=1;
require_once (getenv("GPRISM_HOME") . "/renzheng.php");
$bak_s_renzheng_t = $gw_scr['s_renzheng_t'];
$bak_s_renzheng   = $gw_scr['s_renzheng'];		
#==================================================================
# 
#==================================================================
scr_bf_setting();
$w_func = "main_md" . $g_mode;
if(function_exists($w_func)){
	$w_func();
} else {
	main_init();
}

$gw_scr['s_renzheng']   = $bak_s_renzheng;		
$gw_scr['s_renzheng_t'] = $bak_s_renzheng_t;

scr_af_setting();
get_screen(1, null, 1);

echo "<a   href='http://pscsggpapp3.mscs.intra/gprism-support/' >This is link </a>";
#==================================================================
# Close DB
#==================================================================
xdb_op_closedb();
?>
